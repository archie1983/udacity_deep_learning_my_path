<!DOCTYPE html>
<html lang="en-US" prefix="og: http://ogp.me/ns#">
<head><link rel="stylesheet" type="text/css" href="https://www.pyimagesearch.com/wp-content/cache/minify/25595.css" media="all" />

<meta charset="UTF-8" />

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<!-- <link rel="stylesheet" type="text/css" href="https://www.pyimagesearch.com/static/css/header_fix.css" media="all"/> -->
<link rel="pingback" href="https://www.pyimagesearch.com/xmlrpc.php" />
<link rel="shortcut icon" href="https://www.pyimagesearch.com/wp-content/themes/canvas/favicon.ico" />

<!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame -->
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

<!--  Mobile viewport scale -->
<meta content="initial-scale=1.0, maximum-scale=1.0, user-scalable=yes" name="viewport"/>

<!-- This site is optimized with the Yoast SEO plugin v7.0.3 - https://yoast.com/wordpress/plugins/seo/ -->
<title>ImageNet: VGGNet, ResNet, Inception, and Xception with Keras - PyImageSearch</title>
<meta name="description" content="Learn how to use state-of-the-art Convolutional Neural Networks (CNNs) such as VGGNet, ResNet, and Inception using Keras and Python."/>
<link rel="canonical" href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="ImageNet: VGGNet, ResNet, Inception, and Xception with Keras - PyImageSearch" />
<meta property="og:description" content="Learn how to use state-of-the-art Convolutional Neural Networks (CNNs) such as VGGNet, ResNet, and Inception using Keras and Python." />
<meta property="og:url" content="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" />
<meta property="og:site_name" content="PyImageSearch" />
<meta property="article:tag" content="inception" />
<meta property="article:tag" content="keras" />
<meta property="article:tag" content="micro-architecture" />
<meta property="article:tag" content="resnet" />
<meta property="article:tag" content="vgg" />
<meta property="article:tag" content="xception" />
<meta property="article:section" content="Deep Learning" />
<meta property="article:published_time" content="2017-03-20T10:00:10-04:00" />
<meta property="article:modified_time" content="2017-09-28T09:08:31-04:00" />
<meta property="og:updated_time" content="2017-09-28T09:08:31-04:00" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vggnet_table1.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vggnet_table1.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_residual.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_residual.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_identity.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_identity.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_module.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_module.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_flow.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_flow.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_squeezenet_fire.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_squeezenet_fire.png" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg19_convertible.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg19_convertible.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_revolver.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_revolver.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet50_beagle.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet50_beagle.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_boat.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_boat.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_office.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_office.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_barrel.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_barrel.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_tv.jpg" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_tv.jpg" />
<meta property="og:image" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/dl4cv_in_post.png" />
<meta property="og:image:secure_url" content="https://www.pyimagesearch.com/wp-content/uploads/2017/03/dl4cv_in_post.png" />
<!-- / Yoast SEO plugin. -->

<link rel='dns-prefetch' href='//a.optmstr.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PyImageSearch &raquo; Feed" href="http://feeds.feedburner.com/Pyimagesearch" />
<link rel="alternate" type="application/rss+xml" title="PyImageSearch &raquo; Comments Feed" href="https://www.pyimagesearch.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PyImageSearch &raquo; ImageNet: VGGNet, ResNet, Inception, and Xception with Keras Comments Feed" href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.4\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.4\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.pyimagesearch.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.9.4"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55357,56692,8205,9792,65039],[55357,56692,8203,9792,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>








<!--[if lt IE 9]>
<link href="https://www.pyimagesearch.com/wp-content/themes/canvas/css/non-responsive.css" rel="stylesheet" type="text/css" />
<style type="text/css">.col-full, #wrapper { width: 960px; max-width: 960px; } #inner-wrapper { padding: 0; } body.full-width #header, #nav-container, body.full-width #content, body.full-width #footer-widgets, body.full-width #footer { padding-left: 0; padding-right: 0; } body.fixed-mobile #top, body.fixed-mobile #header-container, body.fixed-mobile #footer-container, body.fixed-mobile #nav-container, body.fixed-mobile #footer-widgets-container { min-width: 960px; padding: 0 1em; } body.full-width #content { width: auto; padding: 0 1em;}</style>
<![endif]-->
<script type="text/javascript" src="https://www.pyimagesearch.com/wp-content/cache/minify/df983.js"></script>


<script type='text/javascript'>
/* <![CDATA[ */
var CrayonSyntaxSettings = {"version":"_2.7.2_beta","is_admin":"0","ajaxurl":"https:\/\/www.pyimagesearch.com\/wp-admin\/admin-ajax.php","prefix":"crayon-","setting":"crayon-setting","selected":"crayon-setting-selected","changed":"crayon-setting-changed","special":"crayon-setting-special","orig_value":"data-orig-value","debug":""};
var CrayonSyntaxStrings = {"copy":"Press %s to Copy, %s to Paste","minimize":"Click To Expand Code"};
/* ]]> */
</script>
<script type="text/javascript" src="https://www.pyimagesearch.com/wp-content/cache/minify/49ed6.js"></script>

<script type='text/javascript' data-cfasync="false" id="omapi-script" async="async" src='https://a.optmstr.com/app/js/api.min.js?ver=1.3.4'></script>
<script type="text/javascript" src="https://www.pyimagesearch.com/wp-content/cache/minify/83e7b.js"></script>



<link rel='https://api.w.org/' href='https://www.pyimagesearch.com/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.pyimagesearch.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.pyimagesearch.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.4" />
<link rel='shortlink' href='https://www.pyimagesearch.com/?p=5218' />
<link rel="alternate" type="application/json+oembed" href="https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.pyimagesearch.com%2F2017%2F03%2F20%2Fimagenet-vggnet-resnet-inception-xception-keras%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.pyimagesearch.com%2F2017%2F03%2F20%2Fimagenet-vggnet-resnet-inception-xception-keras%2F&#038;format=xml" />

<!-- Theme version -->
<meta name="generator" content="Canvas 5.5.7" />
<meta name="generator" content="WooFramework 5.5.5" />

<!-- Custom CSS Styling -->
<style type="text/css">
#logo .site-title, #logo .site-description { display:none; }
body {background-repeat:no-repeat;background-position:top left;background-attachment:scroll;border-top:0px solid #000000;}
#header {background-color:#ffffff;background-repeat:no-repeat;background-position:left top;margin-top:0px;margin-bottom:0px;padding-top:15px;padding-bottom:20px;border:0px solid ;}
#logo .site-title a {font:bold 32px/1em "Helvetica Neue", Helvetica, sans-serif;color:#222222;}
#logo .site-description {font:300 13px/1em "Helvetica Neue", Helvetica, sans-serif;color:#999999;}
#header-container{background-color:#ffffff;}#nav-container{background:#169fe6;}#nav-container{border-top:0px solid #dbdbdb;border-bottom:0px solid #dbdbdb;border-left:none;border-right:none;}#nav-container #navigation ul#main-nav > li:first-child{border-left: 0px solid #dbdbdb;}#footer-widgets-container{background-color:#f0f0f0}#footer-widgets{border:none;}#footer-container{background-color:#169fe6}#footer-container{border-top:0px solid #dbdbdb;}#footer {border-width: 0 !important;}
body, p { font:300 14px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
h1 { font:bold 28px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h2 { font:bold 24px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h3 { font:bold 20px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h4 { font:bold 16px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h5 { font:bold 14px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h6 { font:bold 12px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }
.page-title, .post .title, .page .title {font:bold 2.2em/1.1em Arial, sans-serif;color:#3E3E3E;}
.post .title a:link, .post .title a:visited, .page .title a:link, .page .title a:visited {color:#3E3E3E}
.post-meta { font:300 1em/1.5em Arial, sans-serif;color:#3E3E3E; }
.entry, .entry p{ font:300 15px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
.post-more {font:300 13px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:;border-top:0px solid #e6e6e6;border-bottom:0px solid #e6e6e6;}
#post-author, #connect {border-top:1px solid #e6e6e6;border-bottom:1px solid #e6e6e6;border-left:1px solid #e6e6e6;border-right:1px solid #e6e6e6;border-radius:5px;-moz-border-radius:5px;-webkit-border-radius:5px;background-color:#fafafa}
.nav-entries a, .woo-pagination { font:300 13px/1em "Helvetica Neue", Helvetica, sans-serif;color:#888; }
.woo-pagination a, .woo-pagination a:hover {color:#888!important}
.widget h3 {font:bold 14px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#555555;border-bottom:1px solid #e6e6e6;}
.widget_recent_comments li, #twitter li { border-color: #e6e6e6;}
.widget p, .widget .textwidget { font:300 13px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
.widget {font:300 13px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555;border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px;}
#tabs .inside li a, .widget_woodojo_tabs .tabbable .tab-pane li a { font:bold 12px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
#tabs .inside li span.meta, .widget_woodojo_tabs .tabbable .tab-pane li span.meta { font:300 11px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#999999; }
#tabs ul.wooTabs li a, .widget_woodojo_tabs .tabbable .nav-tabs li a { font:300 11px/2em "Helvetica Neue", Helvetica, sans-serif;color:#999999; }
@media only screen and (min-width:768px) {
ul.nav li a, #navigation ul.rss a, #navigation .cart-contents, #navigation ul.rss, #navigation ul.cart .cart_list a{ font:300 13px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#ffffff; } #navigation ul.rss li a:before { color:#ffffff;}
#navigation ul.nav > li a:hover, #navigation ul.nav > li:hover a, #navigation ul.nav li ul li a, #navigation ul.cart > li:hover > a, #navigation ul.cart > li > ul > div, #navigation ul.cart > li > ul > div p, #navigation ul.cart > li > ul span, #navigation ul.cart .cart_list a, #navigation ul.nav li.current_page_item a, #navigation ul.nav li.current_page_parent a, #navigation ul.nav li.current-menu-ancestor a, #navigation ul.nav li.current-cat a, #navigation ul.nav li.current-menu-item a { color:#169fe6!important; }
#navigation ul.nav > li a:hover, #navigation ul.nav > li:hover, #navigation ul.nav li ul, #navigation ul.cart > li:hover, #navigation ul.cart > li > ul > div, #navigation ul.nav li.current_page_item a, #navigation ul.nav li.current_page_parent a, #navigation ul.nav li.current-menu-ancestor a, #navigation ul.nav li.current-cat a, #navigation ul.nav li.current-menu-item a{background-color:#ffffff!important}
#navigation ul.nav li ul, #navigation ul.cart > li > ul > div  { border: 0px solid #dbdbdb; }
#navigation ul.nav > li > ul  { left: 0; }
#navigation ul.nav > li  { border-right: 0px solid #dbdbdb; }#navigation ul.nav > li > ul  { left: 0; }
#navigation  { box-shadow: none; -moz-box-shadow: none; -webkit-box-shadow: none; }#navigation ul li:first-child, #navigation ul li:first-child a { border-radius:0px 0 0 0px; -moz-border-radius:0px 0 0 0px; -webkit-border-radius:0px 0 0 0px; }
#navigation {background:#169fe6;border-top:0px solid #dbdbdb;border-bottom:0px solid #dbdbdb;border-left:0px solid #dbdbdb;border-right:0px solid #dbdbdb;border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px;}
#top ul.nav li a { font:300 12px/1.6em "Helvetica Neue", Helvetica, sans-serif;color:#ddd; }
}
#footer, #footer p { font:300 13px/1.4em "Helvetica Neue", Helvetica, sans-serif;color:#ffffff; }
#footer {background-color:#169fe6;border-top:0px solid #dbdbdb;border-bottom:0px solid ;border-left:0px solid ;border-right:0px solid ;border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px;}
.magazine #loopedSlider .content h2.title a { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
.magazine #loopedSlider .content .excerpt p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.magazine .block .post .title, .magazine .block .post .title a { font:bold 18px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }
#loopedSlider.business-slider .content h2 { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
#loopedSlider.business-slider .content h2.title a { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
#wrapper #loopedSlider.business-slider .content p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.archive_header { font:bold 18px/1em Arial, sans-serif;color:#222222; }
.archive_header {border-bottom:1px solid #e6e6e6;}
</style>
<!-- Options Panel Custom CSS -->
<style type="text/css">
/* Subscribe & Connect button style */
#mc-embedded-subscribe{background-color: #DF4B4B;}

/* MailChimp for WP Plugin styles */
.mc4wp-form input[type=submit]{background-color: #DF4B4B;}

/* Hide the header/footer on almost finished pages */
.page-id-365 #header, .page-id-365 #nav-container, .page-id-365 #footer-container{display: none;}
.page-id-4031 #header, .page-id-4031 #nav-container, .page-id-4031 #footer-container{display: none;}
.page-id-365 #content{padding-top: 30px;}
.page-id-4031 #content{padding-top: 30px;}
.page-id-5289 #header, .page-id-5289 #nav-container, .page-id-5289 #footer-container{display: none;}
.page-id-5289 #content{padding-top: 30px;}

/* Hide the header/footer on confirmation pages */
.page-id-1397 #header, .page-id-1397 #nav-container, .page-id-1397 #footer-container{display: none;}
.page-id-1382 #header, .page-id-1382 #nav-container, .page-id-1382 #footer-container{display: none;}
.page-id-1481 #header, .page-id-1481 #nav-container, .page-id-1481 #footer-container{display: none;}
.page-id-3200 #header, .page-id-3200 #nav-container, .page-id-3200 #footer-container{display: none;}
.page-id-4038 #header, .page-id-4038 #nav-container, .page-id-4038 #footer-container{display: none;}
.page-id-5278 #header, .page-id-5278 #nav-container, .page-id-5278 #footer-container{display: none;}
.page-id-8101 #header, .page-id-8101 #nav-container, .page-id-8101 #footer-container{display: none;}
.page-id-1397 #content, .page-id-1382 #content, .page-id-1481 #content, .page-id-4038 #content, .page-id-5278 #content, .page-id-8101 #content{padding-top: 30px;}

/* Manipulate content on 'Let me show you...' page */
.page-id-3200 #content{padding-top: 15px;}
.page-id-3200 #content h1.title{display: none;}
.page-id-3200 #content .entry h1{font-size: 32px;}

/* Add margin to bottom of LaTeX equations, but only when they are not in paragraphs */
section.entry .latex{margin-bottom: 15px;}
section.entry p .latex{margin-bottom: 0px;}

/* Fix list specific issues on the "Start Here" page */
.page-id-4374 #start_here_benefits li{margin-bottom: 15px;}

/* Fix search icon */
button.icon-search.submit{margin-top: -7px;}
</style>


<!-- Woo Shortcodes CSS -->


<!-- Custom Stylesheet -->

<style type="text/css">
/* <![CDATA[ */
img.latex { vertical-align: middle; border: none; }
/* ]]> */
</style>

<!-- start Mixpanel -->
<script type="text/javascript">(function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");
for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);
mixpanel.init("2486e0f021e92605d44d32fce5f1d826");
</script>
<!-- end Mixpanel -->

</head>
<body class="post-template-default single single-post postid-5218 single-format-standard chrome alt-style-default two-col-left width-960 two-col-left-960 full-width full-header full-footer">
<div id="wrapper">

	<div id="inner-wrapper">

	    <!--#header-container-->
    <div id="header-container">
<h3 class="nav-toggle icon"><a href="#navigation">Navigation</a></h3>

	<header id="header" class="col-full">

		<div id="logo">
<a href="https://www.pyimagesearch.com/" title="Be awesome at OpenCV, Python, deep learning, and computer vision"><img src="https://www.pyimagesearch.com/wp-content/uploads/2013/12/logo.png" alt="PyImageSearch" /></a>
<span class="site-title"><a href="https://www.pyimagesearch.com/">PyImageSearch</a></span>
<span class="site-description">Be awesome at OpenCV, Python, deep learning, and computer vision</span>
</div>

	</header>

	    </div><!--/#header-container-->
    <!--#nav-container-->
    <div id="nav-container">
<nav id="navigation" class="col-full" role="navigation">

	<section class="menus">

		<a href="https://www.pyimagesearch.com" class="nav-home"><span>Home</span></a>

	<h3>Main Menu</h3><ul id="main-nav" class="nav fl"><li id="menu-item-4519" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4519"><a href="https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/">Start Here</a></li>
<li id="menu-item-2616" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2616"><a href="https://www.pyimagesearch.com/practical-python-opencv/">Practical Python and OpenCV</a></li>
<li id="menu-item-2617" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2617"><a href="https://www.pyimagesearch.com/pyimagesearch-gurus/">PyImageSearch Gurus</a></li>
<li id="menu-item-5929" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-5929"><a href="https://www.pyimageconf.com/">PyImageConf</a></li>
<li id="menu-item-2615" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2615"><a href="https://www.pyimagesearch.com/opencv-tutorials-resources-guides/">OpenCV 3 Tutorials</a></li>
<li id="menu-item-2618" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2618"><a href="https://www.pyimagesearch.com/free-opencv-crash-course/">FREE OpenCV Course</a></li>
<li id="menu-item-2619" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2619"><a href="https://www.pyimagesearch.com/about/">About</a></li>
<li id="menu-item-6744" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6744"><a href="https://www.pyimagesearch.com/contact/">Contact</a></li>
</ul>
	</section><!-- /.menus -->

	<a href="#top" class="nav-close"><span>Return to Content</span></a>

</nav>
    </div><!--/#nav-container-->
       
    <!-- #content Starts -->
	    <div id="content" class="col-full">
    
    	<div id="main-sidebar-container">    

            <!-- #main Starts -->
                        <section id="main">                       
<article class="post-5218 post type-post status-publish format-standard hentry category-deep-learning-2 category-machine-learning-2 category-tutorials tag-inception tag-keras tag-micro-architecture tag-resnet tag-vgg tag-xception">
	<header>
	<h1 class="title">ImageNet: VGGNet, ResNet, Inception, and Xception with Keras</h1>	</header>
<div class="post-meta"><span class="small">By</span> <span class="author vcard"><span class="fn"><a href="https://www.pyimagesearch.com/author/adrian/" title="Posts by Adrian Rosebrock" rel="author">Adrian Rosebrock</a></span></span> <span class="small">on</span> <abbr class="date time published" title="2017-03-20T10:00:10-0400">March 20, 2017</abbr>  <span class="small">in</span> <span class="categories"><a href="https://www.pyimagesearch.com/category/deep-learning-2/" title="View all items in Deep Learning">Deep Learning</a>, <a href="https://www.pyimagesearch.com/category/machine-learning-2/" title="View all items in Machine Learning">Machine Learning</a>, <a href="https://www.pyimagesearch.com/category/tutorials/" title="View all items in Tutorials">Tutorials</a></span>  </div>
	<section class="entry">
<div id="fsb-social-bar" class="fsb-social-bar" data-post-id="5218" data-socialite="true"><style type="text/css">            #fsb-social-bar { width: 100%; border-bottom: 1px solid #dbdbdb; border-top: 1px solid #dbdbdb; padding: 10px 0; margin: 0px 0 20px 0; float: left; background: #fff; position: relative; clear: both; }            #fsb-social-bar a { border: 0px !important }            #fsb-social-bar.fsb-fixed { position: fixed; top: -2px; z-index: 99999; }            #fsb-social-bar .fsb-title { display: block; float: left; margin: 3px 20px 0 0; font-size: 16px; font-family: Arial, Helvetica, sans-serif; text-decoration: none; color: #333; }            #fsb-social-bar .fsb-share-facebook { width: 120px; float: left; padding: 3px 0 2px; height: 25px; }            #fsb-social-bar .fsb-share-facebook.fsb-hide-count { width: 44px; overflow: hidden; margin-right: 30px; }            #fsb-social-bar .fsb-share-twitter { float: left; width: 135px; padding: 3px 0 2px; height: 25px; }            #fsb-social-bar .fsb-share-twitter.fsb-hide-count { width: 61px; overflow: hidden; margin-right: 30px; }            #fsb-social-bar .fsb-share-google { float: left; width: 105px; padding: 3px 0 2px; height: 25px; }            #fsb-social-bar .fsb-share-google.fsb-hide-count { width: 33px; overflow: hidden; margin-right: 30px; }            #fsb-social-bar .fsb-share-linkedin { float: left; width: 135px; padding: 3px 0 2px; height: 25px; }            #fsb-social-bar .fsb-share-linkedin.fsb-hide-count { width: 61px; overflow: hidden; margin-right: 30px; }            #fsb-social-bar .fsb-share-pinterest { float: left; width: 115px; padding: 3px 0 2px; height: 25px;}            #fsb-social-bar .fsb-share-pinterest.fsb-hide-count { width: 43px; overflow: hidden; margin-right: 30px; }            #fsb-social-bar .socialite { display: block; position: relative; background: url(https://www.pyimagesearch.com/wp-content/plugins/floating-social-bar/images/fsb-sprite.png) no-repeat scroll 0 0; }            #fsb-social-bar .socialite-loaded { background: none !important; }            #fsb-social-bar .fsb-service-title { display: none; }            #fsb-social-bar a { color: #333; text-decoration: none; font-size: 12px; font-family: Arial, Helvetica, sans-serif; }            #fsb-social-bar .fsb-twitter { width: 105px; height: 25px; background-position: -13px -10px; line-height: 25px; vertical-align: middle; }            #fsb-social-bar .fsb-twitter .fsb-count { width: 30px; text-align: center; display: inline-block; margin: 0px 0 0 69px; color: #333; }            #fsb-social-bar .fsb-google { width: 75px; height: 25px; background-position: -136px -10px; line-height: 25px; vertical-align: middle; }            #fsb-social-bar .fsb-google .fsb-count { width: 30px; text-align: center; display: inline-block; margin: 0px 0 0 41px; color: #333; }            #fsb-social-bar .fsb-google .socialite-button { margin: 0 !important; }            #fsb-social-bar .fsb-share-google .socialite-loaded .socialite-button{padding: 2px 0 0}            #fsb-social-bar .fsb-facebook { width: 89px; height: 25px; background-position: -231px -10px; line-height: 25px; vertical-align: middle; }            #fsb-social-bar .fsb-facebook .fsb-count { width: 30px; text-align: center; display: inline-block; margin: 0px 0 0 52px; color: #333; }            #fsb-social-bar .fsb-facebook .socialite-button { margin: 0 !important;}            #fsb-social-bar .fsb-share-facebook .socialite-loaded .socialite-button {padding: 2px 0 0}            #fsb-social-bar .fsb-linkedin { width: 105px; height: 25px; background-position: -347px -10px; line-height: 25px; vertical-align: middle; }            #fsb-social-bar .fsb-linkedin .fsb-count { width: 30px; text-align: center; display: inline-block; margin: 0px 0 0 70px; color: #333; }            #fsb-social-bar .fsb-linkedin .socialite-button { margin: 0 !important; }            #fsb-social-bar .fsb-pinterest { width: 88px; height: 25px; background-position: -484px -10px; line-height: 25px; vertical-align: middle; }            #fsb-social-bar .fsb-pinterest .fsb-count { width: 30px; text-align: center; display: inline-block; margin: 0px 0 0 50px; color: #333; }            #fsb-social-bar .fsb-pinterest .socialite-button { margin: 0 !important; }            .fsb-clear { clear: both; }            .fsb-clear:after { clear:both; content:; display:block; height:0; line-height:0; overflow:auto; visibility:hidden; zoom:1; }            @media (max-width: 768px) { #fsb-social-bar.fsb-fixed { position: relative !important; top: auto !important; } }        </style><div class="fsb-share-twitter fsb-hide-count"><a href="https://twitter.com/share?original_referer=https%3A%2F%2Fwww.pyimagesearch.com%2F&source=tweetbutton&text=ImageNet%3A+VGGNet%2C+ResNet%2C+Inception%2C+and+Xception+with+Keras&url=https%3A%2F%2Fwww.pyimagesearch.com%2F2017%2F03%2F20%2Fimagenet-vggnet-resnet-inception-xception-keras%2F&via=pyimagesearch" class="socialite twitter fsb-twitter" data-fsb-service="twitter" rel="nofollow" target="_blank" title="Be the first one to tweet this article!"><span class="fsb-service-title">Twitter</span><span class="fsb-count">0</span></a></div><div class="fsb-share-facebook fsb-hide-count"><a href="http://www.facebook.com/sharer.php?u=https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" class="socialite facebook fsb-facebook" data-fsb-service="facebook" data-href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="fsb-service-title">Facebook</span><span class="fsb-count">0</span></a></div><div class="fsb-share-google fsb-hide-count"><a href="https://plus.google.com/share?url=https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" class="socialite googleplus fsb-google" data-fsb-service="google" data-size="medium" data-href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" rel="nofollow" target="_blank"><span class="fsb-service-title">Google+</span><span class="fsb-count">0</span></a></div><div class="fsb-share-linkedin fsb-hide-count"><a href="https://www.linkedin.com/cws/share?url=https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" class="socialite linkedin fsb-linkedin" data-fsb-service="linkedin" data-size="medium" data-href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/" rel="nofollow" target="_blank"><span class="fsb-service-title">LinkedIn</span><span class="fsb-count">0</span></a></div></div><div class="fsb-clear"></div><p><img class="aligncenter size-full wp-image-5224" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball.jpg" alt="" width="600" height="364" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball-300x182.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>A few months ago I wrote a <a href="https://www.pyimagesearch.com/2016/08/10/imagenet-classification-with-python-and-keras/" target="_blank">tutorial</a> on how to classify images using Convolutional Neural Networks (specifically, VGG16) pre-trained on the ImageNet dataset with Python and the Keras deep learning library.</p>
<p>The pre-trained networks inside of Keras are capable of recognizing <em>1,000 different object categories</em>, similar to objects we encounter in our day-to-day lives with high accuracy.</p>
<p>Back then, the pre-trained ImageNet models were <strong><em>separate</em></strong> from the core Keras library, requiring us to clone a <a href="https://github.com/fchollet/deep-learning-models" target="_blank">free-standing GitHub repo</a> and then <em>manually</em> copy the code into our projects.</p>
<p>This solution worked well enough; however, since my original blog post was published, the pre-trained networks (VGG16, VGG19, ResNet50, Inception V3, and Xception) have been <strong><em>fully integrated into the Keras core</em></strong> (no need to clone down a separate repo anymore) &#8212; these implementations can be found inside the <a href="https://github.com/fchollet/keras/tree/master/keras/applications" target="_blank">applications sub-module</a>.</p>
<p>Because of this, I&#8217;ve decided to create a <em>new, updated tutorial </em>that demonstrates how to utilize these state-of-the-art networks in your own classification projects.</p>
<p>Specifically, we&#8217;ll create a special Python script that can load <em>any</em> of these networks using <em>either</em> a TensorFlow or Theano backend, and then classify your own custom input images.</p>
<p><strong>To learn more about classifying images with VGGNet, ResNet, Inception, and Xception,<em> just keep reading.</em></strong></p>
<div style="padding-top: 10px; padding-bottom: 15px; padding-right: 10px; height: 70px; background: url('https://www.pyimagesearch.com/wp-content/uploads/2014/02/download-code-icon.png'); background-size: 70px 70px; background-repeat: no-repeat;">
<p style="margin-top: 1px; margin-left: 80px; font-weight: bold;">Looking for the source code to this post?<br />
<a id="scroll_to_code" href="#">Jump right to the downloads section.</a></p>
</div>
<h2>VGGNet, ResNet, Inception, and Xception with Keras</h2>
<p>In the first half of this blog post I&#8217;ll briefly discuss the VGG, ResNet, Inception, and Xception network architectures included in the Keras library.</p>
<p>We&#8217;ll then create a custom Python script using Keras that can load these pre-trained network architectures from disk and classify your own input images.</p>
<p>Finally, we&#8217;ll review the results of these classifications on a few sample images.</p>
<h3>State-of-the-art deep learning image classifiers in Keras</h3>
<p>Keras ships out-of-the-box with five Convolutional Neural Networks that have been pre-trained on the ImageNet dataset:</p>
<ol>
<li>VGG16</li>
<li>VGG19</li>
<li>ResNet50</li>
<li>Inception V3</li>
<li>Xception</li>
</ol>
<p>Let&#8217;s start with a overview of the ImageNet dataset and then move into a brief discussion of each network architecture.</p>
<h4>What is ImageNet?</h4>
<p><a href="http://image-net.org/" target="_blank">ImageNet</a> is formally a project aimed at (manually) labeling and categorizing images into almost 22,000 separate object categories for the purpose of computer vision research.</p>
<p>However, when we hear the term <em>&#8220;ImageNet&#8221;</em> in the context of deep learning and Convolutional Neural Networks, we are likely referring to the <a href="http://www.image-net.org/challenges/LSVRC/" target="_blank"><em>ImageNet Large Scale Visual Recognition Challenge</em></a>, or ILSVRC for short.</p>
<p>The goal of this image classification challenge is to train a model that can correctly classify an input image into 1,000 separate object categories.</p>
<p>Models are trained on ~1.2 million training images with another 50,000 images for validation and 100,000 images for testing.</p>
<p>These 1,000 image categories represent object classes that we encounter in our day-to-day lives, such as species of dogs, cats, various household objects, vehicle types, and much more. You can find the full list of object categories in the ILSVRC challenge <a href="http://image-net.org/challenges/LSVRC/2014/browse-synsets" target="_blank">here</a>.</p>
<p>When it comes to image classification, the ImageNet challenge is the <em>de facto</em> benchmark for computer vision classification algorithms &#8212; and the leaderboard for this challenge has been <strong><em>dominated</em></strong> by Convolutional Neural Networks and deep learning techniques since 2012.</p>
<p>The state-of-the-art pre-trained networks included in the Keras core library represent some of the highest performing Convolutional Neural Networks on the ImageNet challenge over the past few years. These networks also demonstrate a strong ability to <em>generalize</em> to images outside the ImageNet dataset via <em>transfer learning</em>, such as feature extraction and fine-tuning.</p>
<h4>VGG16 and VGG19</h4>
<div id="attachment_5231" style="max-width: 480px" class="wp-caption aligncenter"><img class="size-full wp-image-5231" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16.png" alt="" width="470" height="276" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16.png 470w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16-300x176.png 300w" sizes="(max-width: 470px) 100vw, 470px" /><p class="wp-caption-text"><strong>Figure 1:</strong> A visualization of the VGG architecture (<a href="https://www.cs.toronto.edu/~frossard/post/vgg16/" target="_blank">source</a>).</p></div>
<p>The VGG network architecture was introduced by Simonyan and Zisserman in their 2014 paper, <a href="https://arxiv.org/abs/1409.1556" target="_blank"><em>Very Deep Convolutional Networks for Large Scale Image Recognition</em></a>.</p>
<p>This network is characterized by its simplicity, using only <em>3&#215;3</em> convolutional layers stacked on top of each other in increasing depth. Reducing volume size is handled by max pooling. Two fully-connected layers, each with 4,096 nodes are then followed by a softmax classifier (above).</p>
<p>The &#8220;16&#8221; and &#8220;19&#8221; stand for the number of weight layers in the network (columns D and E in <strong>Figure 2</strong> below):</p>
<div id="attachment_5225" style="max-width: 485px" class="wp-caption aligncenter"><img class="size-full wp-image-5225" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vggnet_table1.png" alt="" width="475" height="480" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vggnet_table1.png 475w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vggnet_table1-297x300.png 297w" sizes="(max-width: 475px) 100vw, 475px" /><p class="wp-caption-text"><strong>Figure 2:</strong> Table 1 of <a href="https://arxiv.org/abs/1409.1556" target="_blank"><em>Very Deep Convolutional Networks for Large Scale Image Recognition</em></a>, Simonyan and Zisserman (2014).</p></div>
<p>In 2014, 16 and 19 layer networks were considered <em>very</em> deep (although we now have the ResNet architecture which can be successfully trained at depths of 50-200 for ImageNet and over 1,000 for CIFAR-10).</p>
<p>Simonyan and Zisserman found training VGG16 and VGG19 challenging (specifically regarding convergence on the deeper networks), so in order to make training easier, they first trained <em>smaller</em> versions of VGG with less weight layers (columns A and C) first.</p>
<p>The smaller networks converged and were then used as <em>initializations</em> for the larger, deeper networks &#8212; this process is called <em><strong>pre-training</strong></em>.</p>
<p>While making logical sense, pre-training is a very time consuming, tedious task, requiring an <em>entire network</em> to be trained <strong>before</strong> it can serve as an initialization for a deeper network.</p>
<p>We no longer use pre-training (in most cases) and instead prefer Xaiver/Glorot initialization or MSRA initialization (sometimes called He et al. initialization from the paper, <a href="https://arxiv.org/abs/1502.01852" target="_blank"><em>Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification</em></a>). You can read more about the importance of weight initialization and the convergence of deep neural networks inside <a href="https://arxiv.org/abs/1511.06422" target="_blank"><em>All you need is a good init</em></a>, Mishkin and Matas (2015).</p>
<p>Unfortunately, there are two major drawbacks with VGGNet:</p>
<ol>
<li>It is <em>painfully slow</em> to train.</li>
<li>The network architecture weights themselves are quite large (in terms of disk/bandwidth).</li>
</ol>
<p>Due to its depth and number of fully-connected nodes, VGG is over 533MB for VGG16 and 574MB for VGG19. This makes deploying VGG a tiresome task.</p>
<p>We still use VGG in many deep learning image classification problems; however, smaller network architectures are often more desirable (such as SqueezeNet, GoogLeNet, etc.).</p>
<h4>ResNet</h4>
<p>Unlike traditional <em>sequential</em> network architectures such as AlexNet, OverFeat, and VGG, ResNet is instead a form of &#8220;exotic architecture&#8221; that relies on micro-architecture modules (also called &#8220;network-in-network architectures&#8221;).</p>
<p>The term <em>micro-architecture</em> refers to the set of &#8220;building blocks&#8221; used to construct the network. A collection of micro-architecture building blocks (along with your standard CONV, POOL, etc. layers) leads to the <em>macro-architecture</em> (i.e,. the end network itself).</p>
<p>First introduced by He et al. in their 2015 paper, <a href="https://arxiv.org/abs/1512.03385" target="_blank"><em>Deep Residual Learning for Image Recognition</em></a>, the ResNet architecture has become a seminal work, demonstrating that <em>extremely deep</em> networks can be trained using standard SGD (and a reasonable initialization function) through the use of residual modules:</p>
<div id="attachment_5226" style="max-width: 169px" class="wp-caption aligncenter"><img class="size-full wp-image-5226" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_residual.png" alt="" width="159" height="333" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_residual.png 159w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_residual-143x300.png 143w" sizes="(max-width: 159px) 100vw, 159px" /><p class="wp-caption-text"><strong>Figure 3:</strong> The residual module in ResNet as originally proposed by He et al. in 2015.</p></div>
<p>Further accuracy can be obtained by updating the residual module to use <em>identity mappings</em>, as demonstrated in their 2016 followup publication, <a href="https://arxiv.org/abs/1603.05027" target="_blank"><em>Identity Mappings in Deep Residual Networks</em></a>:</p>
<div id="attachment_5227" style="max-width: 309px" class="wp-caption aligncenter"><img class="size-full wp-image-5227" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_identity.png" alt="" width="299" height="365" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_identity.png 299w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_identity-246x300.png 246w" sizes="(max-width: 299px) 100vw, 299px" /><p class="wp-caption-text"><strong>Figure 4:</strong> <em>(Left)</em> The original residual module. <em>(Right)</em> The updated residual module using pre-activation.</p></div>
<p>That said, keep in mind that the ResNet50 (as in 50 weight layers) implementation in the Keras core is based on the former 2015 paper.</p>
<p>Even though ResNet is <em>much</em> deeper than VGG16 and VGG19, the model size is actually <em>substantially smaller</em> due to the usage of global average pooling rather than fully-connected layers &#8212; this reduces the model size down to 102MB for ResNet50.</p>
<h4>Inception V3</h4>
<p>The &#8220;Inception&#8221; micro-architecture was first introduced by Szegedy et al. in their 2014 paper, <a href="https://arxiv.org/abs/1409.4842" target="_blank"><em>Going Deeper with Convolutions</em></a>:</p>
<div id="attachment_5228" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5228" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_module.png" alt="" width="600" height="323" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_module.png 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_module-300x162.png 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 5:</strong> The original Inception module used in GoogLeNet.</p></div>
<p>The goal of the inception module is to act as a &#8220;multi-level feature extractor&#8221; by computing <em>1&#215;1</em>, <em>3&#215;3</em>, and <em>5&#215;5</em> convolutions within the <em>same</em> module of the network &#8212; the output of these filters are then stacked along the channel dimension and before being fed into the next layer in the network.</p>
<p>The original incarnation of this architecture was called <em>GoogLeNet</em>, but subsequent manifestations have simply been called <em>Inception vN</em> where <em>N</em> refers to the version number put out by Google.</p>
<p>The Inception V3 architecture included in the Keras core comes from the later publication by Szegedy et al., <em><a href="https://arxiv.org/abs/1512.00567" target="_blank">Rethinking the Inception Architecture for Computer Vision</a> </em>(2015) which proposes updates to the inception module to further boost ImageNet classification accuracy.</p>
<p>The weights for Inception V3 are smaller than both VGG and ResNet, coming in at 96MB.</p>
<h4>Xception</h4>
<div id="attachment_5229" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5229" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_flow.png" alt="" width="600" height="409" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_flow.png 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_flow-300x205.png 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 6:</strong> The Xception architecture.</p></div>
<p>Xception was proposed by none other than <a href="https://twitter.com/fchollet" target="_blank">François Chollet</a> himself, the creator and chief maintainer of the Keras library.</p>
<p>Xception is an extension of the Inception architecture which replaces the standard Inception modules with depthwise separable convolutions.</p>
<p>The original publication, <em>Xception: Deep Learning with Depthwise Separable Convolutions</em> can be found <a href="https://arxiv.org/abs/1610.02357" target="_blank">here</a>.</p>
<p>Xception sports the smallest weight serialization at only 91MB.</p>
<h4>What about SqueezeNet?</h4>
<div id="attachment_5230" style="max-width: 604px" class="wp-caption aligncenter"><img class="size-full wp-image-5230" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_squeezenet_fire.png" alt="" width="594" height="370" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_squeezenet_fire.png 594w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_squeezenet_fire-300x187.png 300w" sizes="(max-width: 594px) 100vw, 594px" /><p class="wp-caption-text"><strong>Figure 7:</strong> The &#8220;fire&#8221; module in SqueezeNet, consisting of a &#8220;squeeze&#8221; and an &#8220;expand&#8221;. (<a href="https://arxiv.org/abs/1602.07360" target="_blank">Iandola et al., 2016</a>).</p></div>
<p>For what it&#8217;s worth, the <a href="https://arxiv.org/abs/1602.07360" target="_blank">SqueezeNet architecture</a> can obtain AlexNet-level accuracy (~57% rank-1 and ~80% rank-5) at only 4.9MB through the usage of &#8220;fire&#8221; modules that &#8220;squeeze&#8221; and &#8220;expand&#8221;.</p>
<p>While leaving a small footprint, SqueezeNet can also be <em>very</em> tricky to train.</p>
<p>That said, I demonstrate how to train SqueezeNet from scratch on the ImageNet dataset inside my upcoming book, <em><a href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/" target="_blank">Deep Learning for Computer Vision with Python</a>.</em></p>
<h3>Classifying images with VGGNet, ResNet, Inception, and Xception with Python and Keras</h3>
<p>Let&#8217;s learn how to classify images with pre-trained Convolutional Neural Networks using the Keras library.</p>
<p>Open up a new file, name it 
			<span id="crayon-5b58348168ba3932024869" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">classify_image</span><span class="crayon-sy">.</span><span class="crayon-v">py</span></span></span> , and insert the following code:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168bb1460011114" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bb1460011114-2">2</div><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bb1460011114-4">4</div><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bb1460011114-6">6</div><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bb1460011114-8">8</div><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bb1460011114-10">10</div><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bb1460011114-12">12</div><div class="crayon-num" data-line="crayon-5b58348168bb1460011114-13">13</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168bb1460011114-1"><span class="crayon-c"># import the necessary packages</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bb1460011114-2"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">applications </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">ResNet50</span></div><div class="crayon-line" id="crayon-5b58348168bb1460011114-3"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">applications </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">InceptionV3</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bb1460011114-4"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">applications </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-v">Xception</span><span class="crayon-h"> </span><span class="crayon-c"># TensorFlow ONLY</span></div><div class="crayon-line" id="crayon-5b58348168bb1460011114-5"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">applications </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">VGG16</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bb1460011114-6"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">applications </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">VGG19</span></div><div class="crayon-line" id="crayon-5b58348168bb1460011114-7"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">applications </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">imagenet_utils</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bb1460011114-8"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">applications</span><span class="crayon-sy">.</span><span class="crayon-e">inception_v3 </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">preprocess_input</span></div><div class="crayon-line" id="crayon-5b58348168bb1460011114-9"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">preprocessing</span><span class="crayon-sy">.</span><span class="crayon-e">image </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">img_to_array</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bb1460011114-10"><span class="crayon-st">from</span><span class="crayon-h"> </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">preprocessing</span><span class="crayon-sy">.</span><span class="crayon-e">image </span><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">load_img</span></div><div class="crayon-line" id="crayon-5b58348168bb1460011114-11"><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">numpy </span><span class="crayon-st">as</span><span class="crayon-h"> </span><span class="crayon-e">np</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bb1460011114-12"><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-k ">argparse</span></div><div class="crayon-line" id="crayon-5b58348168bb1460011114-13"><span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0032 seconds] -->
<p><strong>Lines 2-13</strong> import our required Python packages. As you can see, most of the packages are part of the Keras library.</p>
<p>Specifically, <strong>Lines 2-6</strong> handle importing the Keras implementations of ResNet50, Inception V3, Xception, VGG16, and VGG19, respectively.</p>
<p>Please note that the Xception network is compatible <em>only with the TensorFlow backend</em> (the class will throw an error if you try to instantiate it with a Theano backend).</p>
<p><strong>Line 7</strong> gives us access to the 
			<span id="crayon-5b58348168bb7029176450" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">imagenet_utils</span></span></span>  sub-module, a handy set of convenience functions that will make pre-processing our input images and decoding output classifications easier.</p>
<p>The remainder of the imports are other helper functions, followed by NumPy for numerical processing and 
			<span id="crayon-5b58348168bbb430922074" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">cv2</span></span></span>  for our OpenCV bindings.</p>
<p>Next, let&#8217;s parse our command line arguments:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168bbf432102682" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168bbf432102682-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bbf432102682-16">16</div><div class="crayon-num" data-line="crayon-5b58348168bbf432102682-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bbf432102682-18">18</div><div class="crayon-num" data-line="crayon-5b58348168bbf432102682-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bbf432102682-20">20</div><div class="crayon-num" data-line="crayon-5b58348168bbf432102682-21">21</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168bbf432102682-15"><span class="crayon-c"># construct the argument parse and parse the arguments</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bbf432102682-16"><span class="crayon-v">ap</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-k ">argparse</span><span class="crayon-sy">.</span><span class="crayon-e">ArgumentParser</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168bbf432102682-17"><span class="crayon-v">ap</span><span class="crayon-sy">.</span><span class="crayon-e">add_argument</span><span class="crayon-sy">(</span><span class="crayon-s">"-i"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"--image"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">required</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">,</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bbf432102682-18"><span class="crayon-h">	</span><span class="crayon-k ">help</span><span class="crayon-o">=</span><span class="crayon-s">"path to the input image"</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168bbf432102682-19"><span class="crayon-v">ap</span><span class="crayon-sy">.</span><span class="crayon-e">add_argument</span><span class="crayon-sy">(</span><span class="crayon-s">"-model"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"--model"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-k ">type</span><span class="crayon-o">=</span><span class="crayon-k ">str</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">default</span><span class="crayon-o">=</span><span class="crayon-s">"vgg16"</span><span class="crayon-sy">,</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bbf432102682-20"><span class="crayon-h">	</span><span class="crayon-k ">help</span><span class="crayon-o">=</span><span class="crayon-s">"name of pre-trained network to use"</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168bbf432102682-21"><span class="crayon-v">args</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-k ">vars</span><span class="crayon-sy">(</span><span class="crayon-v">ap</span><span class="crayon-sy">.</span><span class="crayon-e">parse_args</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0043 seconds] -->
<p>We&#8217;ll require only a single command line argument, 
			<span id="crayon-5b58348168bc3841937162" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-o">--</span><span class="crayon-v">image</span></span></span> , which is the path to our input image that we wish to classify.</p>
<p>We&#8217;ll also accept an optional command line argument, 
			<span id="crayon-5b58348168bc7034361966" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-o">--</span><span class="crayon-v">model</span></span></span> , a string that specifies which pre-trained Convolutional Neural Network we would like to use &#8212; this value defaults to 
			<span id="crayon-5b58348168bcb059228903" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">vgg16</span></span></span>  for the VGG16 network architecture.</p>
<p>Given that we accept the name of our pre-trained network via a command line argument, we need to define a Python dictionary that maps the model names (strings) to their actual Keras classes:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168bcf147629042" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())

# define a dictionary that maps model names to their classes
# inside Keras
MODELS = {
	"vgg16": VGG16,
	"vgg19": VGG19,
	"inception": InceptionV3,
	"xception": Xception, # TensorFlow ONLY
	"resnet": ResNet50
}

# esnure a valid model name was supplied via command line argument
if args["model"] not in MODELS.keys():
	raise AssertionError("The --model command line argument should "
		"be a key in the `MODELS` dictionary")</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-24">24</div><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-26">26</div><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-28">28</div><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-30">30</div><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-32">32</div><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-34">34</div><div class="crayon-num" data-line="crayon-5b58348168bcf147629042-35">35</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bcf147629042-36">36</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168bcf147629042-23"><span class="crayon-c"># define a dictionary that maps model names to their classes</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-24"><span class="crayon-c"># inside Keras</span></div><div class="crayon-line" id="crayon-5b58348168bcf147629042-25"><span class="crayon-v">MODELS</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-26"><span class="crayon-h">	</span><span class="crayon-s">"vgg16"</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">VGG16</span><span class="crayon-sy">,</span></div><div class="crayon-line" id="crayon-5b58348168bcf147629042-27"><span class="crayon-h">	</span><span class="crayon-s">"vgg19"</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">VGG19</span><span class="crayon-sy">,</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-28"><span class="crayon-h">	</span><span class="crayon-s">"inception"</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">InceptionV3</span><span class="crayon-sy">,</span></div><div class="crayon-line" id="crayon-5b58348168bcf147629042-29"><span class="crayon-h">	</span><span class="crayon-s">"xception"</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Xception</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-c"># TensorFlow ONLY</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-30"><span class="crayon-h">	</span><span class="crayon-s">"resnet"</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-i">ResNet50</span></div><div class="crayon-line" id="crayon-5b58348168bcf147629042-31"><span class="crayon-sy">}</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-32">&nbsp;</div><div class="crayon-line" id="crayon-5b58348168bcf147629042-33"><span class="crayon-c"># esnure a valid model name was supplied via command line argument</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-34"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"model"</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-st">not</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">MODELS</span><span class="crayon-sy">.</span><span class="crayon-e">keys</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5b58348168bcf147629042-35"><span class="crayon-h">	</span><span class="crayon-st">raise</span><span class="crayon-h"> </span><span class="crayon-k ">AssertionError</span><span class="crayon-sy">(</span><span class="crayon-s">"The --model command line argument should "</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bcf147629042-36"><span class="crayon-h">		</span><span class="crayon-s">"be a key in the `MODELS` dictionary"</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0062 seconds] -->
<p><strong>Lines 25-31</strong> defines our 
			<span id="crayon-5b58348168bd3139841188" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">MODELS</span></span></span>  dictionary which maps a model name string to the corresponding class.</p>
<p>If the 
			<span id="crayon-5b58348168bd7030859575" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-o">--</span><span class="crayon-v">model</span></span></span>  name is not found inside 
			<span id="crayon-5b58348168bda532722870" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">MODELS</span></span></span> , we&#8217;ll raise an 
			<span id="crayon-5b58348168bde481836819" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">AssertionError</span></span></span>  (<strong>Lines 34-36</strong>).</p>
<p>A Convolutional Neural Network takes an image as an input and then returns a set of probabilities corresponding to the class labels as output.</p>
<p>Typical input image sizes to a Convolutional Neural Network trained on ImageNet<em> </em>are <em>224&#215;224</em>, <em>227&#215;227</em>, <em>256&#215;256</em>, and <em>299&#215;299</em>; however, you may see other dimensions as well.</p>
<p>VGG16, VGG19, and ResNet all accept <em>224&#215;224</em> input images while Inception V3 and Xception require <em>299&#215;299</em> pixel inputs, as demonstrated by the following code block:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168be2960267940" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())

# define a dictionary that maps model names to their classes
# inside Keras
MODELS = {
	"vgg16": VGG16,
	"vgg19": VGG19,
	"inception": InceptionV3,
	"xception": Xception, # TensorFlow ONLY
	"resnet": ResNet50
}

# esnure a valid model name was supplied via command line argument
if args["model"] not in MODELS.keys():
	raise AssertionError("The --model command line argument should "
		"be a key in the `MODELS` dictionary")

# initialize the input image shape (224x224 pixels) along with
# the pre-processing function (this might need to be changed
# based on which model we use to classify our image)
inputShape = (224, 224)
preprocess = imagenet_utils.preprocess_input

# if we are using the InceptionV3 or Xception networks, then we
# need to set the input shape to (299x299) [rather than (224x224)]
# and use a different image processing function
if args["model"] in ("inception", "xception"):
	inputShape = (299, 299)
	preprocess = preprocess_input</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168be2960267940-38">38</div><div class="crayon-num" data-line="crayon-5b58348168be2960267940-39">39</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168be2960267940-40">40</div><div class="crayon-num" data-line="crayon-5b58348168be2960267940-41">41</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168be2960267940-42">42</div><div class="crayon-num" data-line="crayon-5b58348168be2960267940-43">43</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168be2960267940-44">44</div><div class="crayon-num" data-line="crayon-5b58348168be2960267940-45">45</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168be2960267940-46">46</div><div class="crayon-num" data-line="crayon-5b58348168be2960267940-47">47</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168be2960267940-48">48</div><div class="crayon-num" data-line="crayon-5b58348168be2960267940-49">49</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line crayon-striped-line" id="crayon-5b58348168be2960267940-38"><span class="crayon-c"># initialize the input image shape (224x224 pixels) along with</span></div><div class="crayon-line" id="crayon-5b58348168be2960267940-39"><span class="crayon-c"># the pre-processing function (this might need to be changed</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168be2960267940-40"><span class="crayon-c"># based on which model we use to classify our image)</span></div><div class="crayon-line" id="crayon-5b58348168be2960267940-41"><span class="crayon-v">inputShape</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">224</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">224</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168be2960267940-42"><span class="crayon-v">preprocess</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">imagenet_utils</span><span class="crayon-sy">.</span><span class="crayon-v">preprocess_input</span></div><div class="crayon-line" id="crayon-5b58348168be2960267940-43">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168be2960267940-44"><span class="crayon-c"># if we are using the InceptionV3 or Xception networks, then we</span></div><div class="crayon-line" id="crayon-5b58348168be2960267940-45"><span class="crayon-c"># need to set the input shape to (299x299) [rather than (224x224)]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168be2960267940-46"><span class="crayon-c"># and use a different image processing function</span></div><div class="crayon-line" id="crayon-5b58348168be2960267940-47"><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"model"</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-s">"inception"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"xception"</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168be2960267940-48"><span class="crayon-h">	</span><span class="crayon-v">inputShape</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">299</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">299</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168be2960267940-49"><span class="crayon-h">	</span><span class="crayon-v">preprocess</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">preprocess_input</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0074 seconds] -->
<p>Here we initialize our 
			<span id="crayon-5b58348168be7449752928" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">inputShape</span></span></span>  to be <em>224&#215;224</em> pixels. We also initialize our 
			<span id="crayon-5b58348168beb257881770" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">preprocess</span></span></span>  function to be the standard 
			<span id="crayon-5b58348168bef319156890" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">preprocess_input</span></span></span>  from Keras (which performs mean subtraction).</p>
<p>However, if we are using Inception or Xception, we need to set the 
			<span id="crayon-5b58348168bf2313063911" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">inputShape</span></span></span>  to <em>299&#215;299</em> pixels, followed by updating 
			<span id="crayon-5b58348168bf6736873323" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">preprocess</span></span></span>  to use a <em><strong>separate pre-processing function</strong></em> that <a href="https://github.com/fchollet/keras/blob/master/keras/applications/inception_v3.py#L389" target="_blank">performs a different type of scaling</a>.</p>
<p>The next step is to load our pre-trained network architecture weights from disk and instantiate our model:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168bfa742506277" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())

# define a dictionary that maps model names to their classes
# inside Keras
MODELS = {
	"vgg16": VGG16,
	"vgg19": VGG19,
	"inception": InceptionV3,
	"xception": Xception, # TensorFlow ONLY
	"resnet": ResNet50
}

# esnure a valid model name was supplied via command line argument
if args["model"] not in MODELS.keys():
	raise AssertionError("The --model command line argument should "
		"be a key in the `MODELS` dictionary")

# initialize the input image shape (224x224 pixels) along with
# the pre-processing function (this might need to be changed
# based on which model we use to classify our image)
inputShape = (224, 224)
preprocess = imagenet_utils.preprocess_input

# if we are using the InceptionV3 or Xception networks, then we
# need to set the input shape to (299x299) [rather than (224x224)]
# and use a different image processing function
if args["model"] in ("inception", "xception"):
	inputShape = (299, 299)
	preprocess = preprocess_input

# load our the network weights from disk (NOTE: if this is the
# first time you are running this script for a given network, the
# weights will need to be downloaded first -- depending on which
# network you are using, the weights can be 90-575MB, so be
# patient; the weights will be cached and subsequent runs of this
# script will be *much* faster)
print("[INFO] loading {}...".format(args["model"]))
Network = MODELS[args["model"]]
model = Network(weights="imagenet")</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168bfa742506277-51">51</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bfa742506277-52">52</div><div class="crayon-num" data-line="crayon-5b58348168bfa742506277-53">53</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bfa742506277-54">54</div><div class="crayon-num" data-line="crayon-5b58348168bfa742506277-55">55</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bfa742506277-56">56</div><div class="crayon-num" data-line="crayon-5b58348168bfa742506277-57">57</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168bfa742506277-58">58</div><div class="crayon-num" data-line="crayon-5b58348168bfa742506277-59">59</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168bfa742506277-51"><span class="crayon-c"># load our the network weights from disk (NOTE: if this is the</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bfa742506277-52"><span class="crayon-c"># first time you are running this script for a given network, the</span></div><div class="crayon-line" id="crayon-5b58348168bfa742506277-53"><span class="crayon-c"># weights will need to be downloaded first -- depending on which</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bfa742506277-54"><span class="crayon-c"># network you are using, the weights can be 90-575MB, so be</span></div><div class="crayon-line" id="crayon-5b58348168bfa742506277-55"><span class="crayon-c"># patient; the weights will be cached and subsequent runs of this</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bfa742506277-56"><span class="crayon-c"># script will be *much* faster)</span></div><div class="crayon-line" id="crayon-5b58348168bfa742506277-57"><span class="crayon-k ">print</span><span class="crayon-sy">(</span><span class="crayon-s">"[INFO] loading {}..."</span><span class="crayon-sy">.</span><span class="crayon-k ">format</span><span class="crayon-sy">(</span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"model"</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168bfa742506277-58"><span class="crayon-v">Network</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">MODELS</span><span class="crayon-sy">[</span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"model"</span><span class="crayon-sy">]</span><span class="crayon-sy">]</span></div><div class="crayon-line" id="crayon-5b58348168bfa742506277-59"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Network</span><span class="crayon-sy">(</span><span class="crayon-v">weights</span><span class="crayon-o">=</span><span class="crayon-s">"imagenet"</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0089 seconds] -->
<p><strong>Line 58</strong> uses the 
			<span id="crayon-5b58348168c00646424666" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">MODELS</span></span></span>  dictionary along with the 
			<span id="crayon-5b58348168c03875354313" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-o">--</span><span class="crayon-v">model</span></span></span>  command line argument to grab the correct 
			<span id="crayon-5b58348168c07057765047" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">Network</span></span></span>  class.</p>
<p>The Convolutional Neural Network is then instantiated on <strong>Line 59</strong> using the pre-trained ImageNet weights;</p>
<p><em><strong>Note:</strong> Weights for VGG16 and VGG19 are &gt; 500MB. ResNet weights are ~100MB, while Inception and Xception weights are between 90-100MB. If this is the </em><strong><em>first</em></strong><em> time you are running this script for a given network, these weights will be (automatically) downloaded and cached to your local disk. Depending on your internet speed, this may take awhile. However, once the weights are downloaded, they will <strong>not</strong> need to be downloaded again, allowing subsequent runs of 
			<span id="crayon-5b58348168c0b270074960" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">classify_image</span><span class="crayon-sy">.</span><span class="crayon-v">py</span></span></span>  to be <strong>much</strong> faster.</em></p>
<p>Our network is now loaded and ready to classify an image &#8212; we just need to prepare this image for classification:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c0f027589991" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())

# define a dictionary that maps model names to their classes
# inside Keras
MODELS = {
	"vgg16": VGG16,
	"vgg19": VGG19,
	"inception": InceptionV3,
	"xception": Xception, # TensorFlow ONLY
	"resnet": ResNet50
}

# esnure a valid model name was supplied via command line argument
if args["model"] not in MODELS.keys():
	raise AssertionError("The --model command line argument should "
		"be a key in the `MODELS` dictionary")

# initialize the input image shape (224x224 pixels) along with
# the pre-processing function (this might need to be changed
# based on which model we use to classify our image)
inputShape = (224, 224)
preprocess = imagenet_utils.preprocess_input

# if we are using the InceptionV3 or Xception networks, then we
# need to set the input shape to (299x299) [rather than (224x224)]
# and use a different image processing function
if args["model"] in ("inception", "xception"):
	inputShape = (299, 299)
	preprocess = preprocess_input

# load our the network weights from disk (NOTE: if this is the
# first time you are running this script for a given network, the
# weights will need to be downloaded first -- depending on which
# network you are using, the weights can be 90-575MB, so be
# patient; the weights will be cached and subsequent runs of this
# script will be *much* faster)
print("[INFO] loading {}...".format(args["model"]))
Network = MODELS[args["model"]]
model = Network(weights="imagenet")

# load the input image using the Keras helper utility while ensuring
# the image is resized to `inputShape`, the required input dimensions
# for the ImageNet pre-trained network
print("[INFO] loading and pre-processing image...")
image = load_img(args["image"], target_size=inputShape)
image = img_to_array(image)

# our input image is now represented as a NumPy array of shape
# (inputShape[0], inputShape[1], 3) however we need to expand the
# dimension by making the shape (1, inputShape[0], inputShape[1], 3)
# so we can pass it through thenetwork
image = np.expand_dims(image, axis=0)

# pre-process the image using the appropriate function based on the
# model that has been loaded (i.e., mean subtraction, scaling, etc.)
image = preprocess(image)</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-61">61</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-62">62</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-63">63</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-64">64</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-65">65</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-66">66</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-67">67</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-68">68</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-69">69</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-70">70</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-71">71</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-72">72</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-73">73</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-74">74</div><div class="crayon-num" data-line="crayon-5b58348168c0f027589991-75">75</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c0f027589991-76">76</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c0f027589991-61"><span class="crayon-c"># load the input image using the Keras helper utility while ensuring</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-62"><span class="crayon-c"># the image is resized to `inputShape`, the required input dimensions</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-63"><span class="crayon-c"># for the ImageNet pre-trained network</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-64"><span class="crayon-k ">print</span><span class="crayon-sy">(</span><span class="crayon-s">"[INFO] loading and pre-processing image..."</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-65"><span class="crayon-v">image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_img</span><span class="crayon-sy">(</span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"image"</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">target_size</span><span class="crayon-o">=</span><span class="crayon-v">inputShape</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-66"><span class="crayon-v">image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">img_to_array</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-67">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-68"><span class="crayon-c"># our input image is now represented as a NumPy array of shape</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-69"><span class="crayon-c"># (inputShape[0], inputShape[1], 3) however we need to expand the</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-70"><span class="crayon-c"># dimension by making the shape (1, inputShape[0], inputShape[1], 3)</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-71"><span class="crayon-c"># so we can pass it through thenetwork</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-72"><span class="crayon-v">image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-e">expand_dims</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">axis</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-73">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-74"><span class="crayon-c"># pre-process the image using the appropriate function based on the</span></div><div class="crayon-line" id="crayon-5b58348168c0f027589991-75"><span class="crayon-c"># model that has been loaded (i.e., mean subtraction, scaling, etc.)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c0f027589991-76"><span class="crayon-v">image</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">preprocess</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0101 seconds] -->
<p><strong>Line 65</strong> loads our input image from disk using the supplied 
			<span id="crayon-5b58348168c16320155991" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">inputShape</span></span></span>  to resize the width and height of the image.</p>
<p><strong>Line 66</strong> converts the image from a PIL/Pillow instance to a NumPy array.</p>
<p>Our input image is now represented as a NumPy array with the shape 
			<span id="crayon-5b58348168c1a001735778" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-sy">(</span><span class="crayon-v">inputShape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">inputShape</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">)</span></span></span> .</p>
<p>However, we typically train/classify images in <em>batches</em> with Convolutional Neural Networks, so we need to add an extra dimension to the array via 
			<span id="crayon-5b58348168c1d248335610" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-v">expand_dims</span></span></span>  on <strong>Line 72</strong>.</p>
<p>After calling 
			<span id="crayon-5b58348168c21407656026" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">np</span><span class="crayon-sy">.</span><span class="crayon-v">expand_dims</span></span></span>  the 
			<span id="crayon-5b58348168c24618036875" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">image</span></span></span>  has the shape 
			<span id="crayon-5b58348168c28629061883" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">inputShape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">inputShape</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">)</span></span></span> . Forgetting to add this extra dimension will result in an error when you call 
			<span id="crayon-5b58348168c2c199850674" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-sy">.</span><span class="crayon-v">predict</span></span></span>  of the 
			<span id="crayon-5b58348168c2f482831937" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">model</span></span></span> .</p>
<p>Lastly, <strong>Line 76</strong> calls the appropriate pre-processing function to perform mean subtraction/scaling.</p>
<p>We are now ready to pass our image through the network and obtain the output classifications:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c33186941917" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())

# define a dictionary that maps model names to their classes
# inside Keras
MODELS = {
	"vgg16": VGG16,
	"vgg19": VGG19,
	"inception": InceptionV3,
	"xception": Xception, # TensorFlow ONLY
	"resnet": ResNet50
}

# esnure a valid model name was supplied via command line argument
if args["model"] not in MODELS.keys():
	raise AssertionError("The --model command line argument should "
		"be a key in the `MODELS` dictionary")

# initialize the input image shape (224x224 pixels) along with
# the pre-processing function (this might need to be changed
# based on which model we use to classify our image)
inputShape = (224, 224)
preprocess = imagenet_utils.preprocess_input

# if we are using the InceptionV3 or Xception networks, then we
# need to set the input shape to (299x299) [rather than (224x224)]
# and use a different image processing function
if args["model"] in ("inception", "xception"):
	inputShape = (299, 299)
	preprocess = preprocess_input

# load our the network weights from disk (NOTE: if this is the
# first time you are running this script for a given network, the
# weights will need to be downloaded first -- depending on which
# network you are using, the weights can be 90-575MB, so be
# patient; the weights will be cached and subsequent runs of this
# script will be *much* faster)
print("[INFO] loading {}...".format(args["model"]))
Network = MODELS[args["model"]]
model = Network(weights="imagenet")

# load the input image using the Keras helper utility while ensuring
# the image is resized to `inputShape`, the required input dimensions
# for the ImageNet pre-trained network
print("[INFO] loading and pre-processing image...")
image = load_img(args["image"], target_size=inputShape)
image = img_to_array(image)

# our input image is now represented as a NumPy array of shape
# (inputShape[0], inputShape[1], 3) however we need to expand the
# dimension by making the shape (1, inputShape[0], inputShape[1], 3)
# so we can pass it through thenetwork
image = np.expand_dims(image, axis=0)

# pre-process the image using the appropriate function based on the
# model that has been loaded (i.e., mean subtraction, scaling, etc.)
image = preprocess(image)

# classify the image
print("[INFO] classifying image with '{}'...".format(args["model"]))
preds = model.predict(image)
P = imagenet_utils.decode_predictions(preds)

# loop over the predictions and display the rank-5 predictions +
# probabilities to our terminal
for (i, (imagenetID, label, prob)) in enumerate(P[0]):
	print("{}. {}: {:.2f}%".format(i + 1, label, prob * 100))</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c33186941917-78">78</div><div class="crayon-num" data-line="crayon-5b58348168c33186941917-79">79</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c33186941917-80">80</div><div class="crayon-num" data-line="crayon-5b58348168c33186941917-81">81</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c33186941917-82">82</div><div class="crayon-num" data-line="crayon-5b58348168c33186941917-83">83</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c33186941917-84">84</div><div class="crayon-num" data-line="crayon-5b58348168c33186941917-85">85</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c33186941917-86">86</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c33186941917-78"><span class="crayon-c"># classify the image</span></div><div class="crayon-line" id="crayon-5b58348168c33186941917-79"><span class="crayon-k ">print</span><span class="crayon-sy">(</span><span class="crayon-s">"[INFO] classifying image with '{}'..."</span><span class="crayon-sy">.</span><span class="crayon-k ">format</span><span class="crayon-sy">(</span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"model"</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c33186941917-80"><span class="crayon-v">preds</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">predict</span><span class="crayon-sy">(</span><span class="crayon-v">image</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168c33186941917-81"><span class="crayon-v">P</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">imagenet_utils</span><span class="crayon-sy">.</span><span class="crayon-e">decode_predictions</span><span class="crayon-sy">(</span><span class="crayon-v">preds</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c33186941917-82">&nbsp;</div><div class="crayon-line" id="crayon-5b58348168c33186941917-83"><span class="crayon-c"># loop over the predictions and display the rank-5 predictions +</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c33186941917-84"><span class="crayon-c"># probabilities to our terminal</span></div><div class="crayon-line" id="crayon-5b58348168c33186941917-85"><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">imagenetID</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">label</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">prob</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-k ">enumerate</span><span class="crayon-sy">(</span><span class="crayon-v">P</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c33186941917-86"><span class="crayon-h">	</span><span class="crayon-k ">print</span><span class="crayon-sy">(</span><span class="crayon-s">"{}. {}: {:.2f}%"</span><span class="crayon-sy">.</span><span class="crayon-k ">format</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">label</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">prob</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0126 seconds] -->
<p>A call to 
			<span id="crayon-5b58348168c3a538920767" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-sy">.</span><span class="crayon-v">predict</span></span></span>  on <strong>Line 80</strong> returns the predictions from the Convolutional Neural Network.</p>
<p>Given these predictions, we pass them into the ImageNet utility function 
			<span id="crayon-5b58348168c3e876796155" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-sy">.</span><span class="crayon-v">decode_predictions</span></span></span>  to give us a list of ImageNet class label IDs, &#8220;human-readable&#8221; labels, and the probability associated with the labels.</p>
<p>The top-5 predictions (i.e., the labels with the largest probabilities) are then printed to our terminal on <strong>Lines 85 and 86</strong>.</p>
<p>The last thing we&#8217;ll do here before we close out our example is load our input image from disk via OpenCV, draw the #1 prediction on the image, and finally display the image to our screen:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c42812402989" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
# import the necessary packages
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from keras.applications import VGG16
from keras.applications import VGG19
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
ap.add_argument("-model", "--model", type=str, default="vgg16",
	help="name of pre-trained network to use")
args = vars(ap.parse_args())

# define a dictionary that maps model names to their classes
# inside Keras
MODELS = {
	"vgg16": VGG16,
	"vgg19": VGG19,
	"inception": InceptionV3,
	"xception": Xception, # TensorFlow ONLY
	"resnet": ResNet50
}

# esnure a valid model name was supplied via command line argument
if args["model"] not in MODELS.keys():
	raise AssertionError("The --model command line argument should "
		"be a key in the `MODELS` dictionary")

# initialize the input image shape (224x224 pixels) along with
# the pre-processing function (this might need to be changed
# based on which model we use to classify our image)
inputShape = (224, 224)
preprocess = imagenet_utils.preprocess_input

# if we are using the InceptionV3 or Xception networks, then we
# need to set the input shape to (299x299) [rather than (224x224)]
# and use a different image processing function
if args["model"] in ("inception", "xception"):
	inputShape = (299, 299)
	preprocess = preprocess_input

# load our the network weights from disk (NOTE: if this is the
# first time you are running this script for a given network, the
# weights will need to be downloaded first -- depending on which
# network you are using, the weights can be 90-575MB, so be
# patient; the weights will be cached and subsequent runs of this
# script will be *much* faster)
print("[INFO] loading {}...".format(args["model"]))
Network = MODELS[args["model"]]
model = Network(weights="imagenet")

# load the input image using the Keras helper utility while ensuring
# the image is resized to `inputShape`, the required input dimensions
# for the ImageNet pre-trained network
print("[INFO] loading and pre-processing image...")
image = load_img(args["image"], target_size=inputShape)
image = img_to_array(image)

# our input image is now represented as a NumPy array of shape
# (inputShape[0], inputShape[1], 3) however we need to expand the
# dimension by making the shape (1, inputShape[0], inputShape[1], 3)
# so we can pass it through thenetwork
image = np.expand_dims(image, axis=0)

# pre-process the image using the appropriate function based on the
# model that has been loaded (i.e., mean subtraction, scaling, etc.)
image = preprocess(image)

# classify the image
print("[INFO] classifying image with '{}'...".format(args["model"]))
preds = model.predict(image)
P = imagenet_utils.decode_predictions(preds)

# loop over the predictions and display the rank-5 predictions +
# probabilities to our terminal
for (i, (imagenetID, label, prob)) in enumerate(P[0]):
	print("{}. {}: {:.2f}%".format(i + 1, label, prob * 100))

# load the image via OpenCV, draw the top prediction on the image,
# and display the image to our screen
orig = cv2.imread(args["image"])
(imagenetID, label, prob) = P[0][0]
cv2.putText(orig, "Label: {}, {:.2f}%".format(label, prob * 100),
	(10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
cv2.imshow("Classification", orig)
cv2.waitKey(0)</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c42812402989-88">88</div><div class="crayon-num" data-line="crayon-5b58348168c42812402989-89">89</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c42812402989-90">90</div><div class="crayon-num" data-line="crayon-5b58348168c42812402989-91">91</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c42812402989-92">92</div><div class="crayon-num" data-line="crayon-5b58348168c42812402989-93">93</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b58348168c42812402989-94">94</div><div class="crayon-num" data-line="crayon-5b58348168c42812402989-95">95</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c42812402989-88"><span class="crayon-c"># load the image via OpenCV, draw the top prediction on the image,</span></div><div class="crayon-line" id="crayon-5b58348168c42812402989-89"><span class="crayon-c"># and display the image to our screen</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c42812402989-90"><span class="crayon-v">orig</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">imread</span><span class="crayon-sy">(</span><span class="crayon-v">args</span><span class="crayon-sy">[</span><span class="crayon-s">"image"</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168c42812402989-91"><span class="crayon-sy">(</span><span class="crayon-v">imagenetID</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">label</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">prob</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">P</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c42812402989-92"><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">putText</span><span class="crayon-sy">(</span><span class="crayon-v">orig</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"Label: {}, {:.2f}%"</span><span class="crayon-sy">.</span><span class="crayon-k ">format</span><span class="crayon-sy">(</span><span class="crayon-v">label</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">prob</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span></div><div class="crayon-line" id="crayon-5b58348168c42812402989-93"><span class="crayon-h">	</span><span class="crayon-sy">(</span><span class="crayon-cn">10</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">30</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-v">FONT_HERSHEY_SIMPLEX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0.8</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">255</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b58348168c42812402989-94"><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-s">"Classification"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">orig</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5b58348168c42812402989-95"><span class="crayon-v">cv2</span><span class="crayon-sy">.</span><span class="crayon-e">waitKey</span><span class="crayon-sy">(</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0150 seconds] -->
<p>To see our pre-trained ImageNet networks in action, take a look at the next section.</p>
<h3>VGGNet, ResNet, Inception, and Xception classification results</h3>
<p>All examples in this blog post were gathered using <a href="https://blog.keras.io/introducing-keras-2.html?t=1" target="_blank"><strong>Keras &gt;= 2.0</strong></a> and a <a href="https://www.tensorflow.org/install/" target="_blank"><strong>TensorFlow backend</strong></a>. If you are using TensorFlow, <em><strong><a href="https://www.tensorflow.org/install/" target="_blank">make sure you are using version &gt;= 1.0</a></strong></em>, otherwise you will run into errors. I&#8217;ve also tested this script with the Theano backend and confirmed that the implementation will work with Theano as well.</p>
<p>Once you have TensorFlow/Theano and Keras installed, make sure you download the source code + example images to this blog post using the <strong><em>&#8220;Downloads&#8221;</em></strong> section at the bottom of the tutorial.</p>
<p>From there, let&#8217;s try classifying an image with VGG16:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c4a485564948" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/soccer_ball.jpg --model vgg16</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c4a485564948-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c4a485564948-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">soccer_ball</span><span class="crayon-e">.jpg</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">vgg16</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p><div id="attachment_5224" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5224" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball.jpg" alt="" width="600" height="364" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_soccer_ball-300x182.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 8:</strong> Classifying a soccer ball using VGG16 pre-trained on the ImageNet database using Keras (<a href="https://pl.wiktionary.org/wiki/piedpilko" target="_blank">source</a>).</p></div></p>
<p>Taking a look at the output, we can see VGG16 correctly classified the image as <em>&#8220;soccer ball&#8221;</em> with 93.43% accuracy.</p>
<p>To use VGG19, we simply need to change the 
			<span id="crayon-5b58348168c4f620905293" class="crayon-syntax crayon-syntax-inline  crayon-theme-classic crayon-theme-classic-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-o">--</span><span class="crayon-v">model</span></span></span>  command line argument:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c5b653441094" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/bmw.png --model vgg19</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c5b653441094-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c5b653441094-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">bmw</span><span class="crayon-e">.png</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">vgg19</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p><div id="attachment_5233" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5233" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg19_convertible.jpg" alt="" width="600" height="354" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg19_convertible.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg19_convertible-300x177.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 9:</strong> Classifying a vehicle as &#8220;convertible&#8221; using VGG19 and Keras (<a href="https://www.pinterest.com/explore/bmw-convertible/" target="_blank">source</a>).</p></div></p>
<p>VGG19 is able to correctly classify the the input image as <em>&#8220;convertible&#8221;</em> with a probability of 91.76%. However, take a look at the other top-5 predictions: <em>sports car</em> with 4.98% probability (which the car is), <em>limousine </em>at 1.06% (incorrect, but still reasonable), and <em>&#8220;car wheel&#8221;</em> at 0.75% (also technically correct since there are car wheels in the image).</p>
<p>We can see similar levels of top-5 accuracy in the following example where we use the pre-trained ResNet architecture:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c61484208846" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/clint_eastwood.jpg --model resnet</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c61484208846-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c61484208846-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">clint_eastwood</span><span class="crayon-e">.jpg</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">resnet</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p><div id="attachment_5234" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5234" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_revolver.jpg" alt="" width="600" height="411" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_revolver.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_revolver-300x206.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 10:</strong> Using ResNet pre-trained on ImageNet with Keras + Python (<a href="http://i.dailymail.co.uk/i/pix/2009/09/24/article-1215766-0009B05300000258-375_468x286.jpg" target="_blank">source</a>).</p></div></p>
<p>ResNet correctly classifies this image of Clint Eastwood holding a gun as <em>&#8220;revolver&#8221;</em> with 69.79% accuracy. It&#8217;s also interesting to see <em>&#8220;rifle&#8221;</em> at 7.74% and <em>&#8220;assault rifle&#8221;</em> at 5.63% included in the top-5 predictions as well. Given the viewing angle of the revolver and the substantial length of the barrel (for a handgun) it&#8217;s easy to see how a Convolutional Neural Network would also return higher probabilities for a rifle as well.</p>
<p>This next example attempts to classify the species of dog using ResNet:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c66691086835" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/jemma.png --model resnet</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c66691086835-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c66691086835-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">jemma</span><span class="crayon-e">.png</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">resnet</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0009 seconds] -->
<p><div id="attachment_5235" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5235" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet50_beagle.jpg" alt="" width="600" height="559" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet50_beagle.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet50_beagle-300x280.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 11:</strong> Classifying dog species using ResNet, Keras, and Python.</p></div></p>
<p>The species of dog is correctly identified as <em>&#8220;beagle&#8221;</em> with 94.48% confidence.</p>
<p>I then tried classifying the following image of Johnny Depp from the <em>Pirates of the Caribbean </em>franchise:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c6b024510571" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/boat.png --model inception</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c6b024510571-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c6b024510571-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">boat</span><span class="crayon-e">.png</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">inception</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p><div id="attachment_5236" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5236" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_boat.jpg" alt="" width="600" height="354" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_boat.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_inception_boat-300x177.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 12:</strong> Classifying a ship wreck with ResNet pre-trained on ImageNet with Keras (<a href="https://www.aliexpress.com/item/Pirates-Of-The-Caribbean-Boats-Ship-Boy-Nature-Tropical-Sea-Waves-Trees-Tv-Movie-Film-Poster/32607808033.html" target="_blank">source</a>).</p></div></p>
<p>While there is indeed a <em>&#8220;boat&#8221;</em> class in ImageNet, it&#8217;s interesting to see that the Inception network was able to correctly identify the scene as a <em>&#8220;(ship) wreck&#8221;</em> with 96.29% probability. All other predicted labels, including <em>&#8220;seashore&#8221;, &#8220;canoe&#8221;, &#8220;paddle&#8221;, </em>and <em>&#8220;breakwater&#8221;</em> are all relevant, and in some cases absolutely correct as well.</p>
<p>For another example of the Inception network in action, I took a photo of the couch sitting in my office:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c70266587195" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/office.png --model inception</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c70266587195-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c70266587195-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">office</span><span class="crayon-e">.png</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">inception</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p><div id="attachment_5237" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5237" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_office.jpg" alt="" width="600" height="366" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_office.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_resnet_office-300x183.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 13:</strong> Recognizing various objects in an image with Inception V3, Python, and Keras.</p></div></p>
<p>Inception correctly predicts there is a <em>&#8220;table lamp&#8221;</em> in the image with 69.68% confidence. The other top-5 predictions are also dead-on, including a <em>&#8220;studio couch&#8221;</em>, <em>&#8220;window shade&#8221;</em> (far right of the image, barely even noticeable), <em>&#8220;lampshade&#8221;</em>, and <em>&#8220;pillow&#8221;</em>.</p>
<p>In the context above, Inception wasn&#8217;t even used as an object detector, but it was still able to classify all parts of the image within its top-5 predictions. It&#8217;s no wonder that Convolutional Neural Networks make for excellent object detectors!</p>
<p>Moving on to Xception:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c74727372635" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/scotch.png --model xception</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c74727372635-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c74727372635-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">scotch</span><span class="crayon-e">.png</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">xception</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p><div id="attachment_5238" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5238" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_barrel.jpg" alt="" width="600" height="337" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_barrel.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_xception_barrel-300x169.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 14:</strong> Using the Xception network architecture to classify an image (<a href="http://www.slrmag.co.uk/lagavulin-rolls-out-the-barrel-to-mark-double-century/" target="_blank">source</a>).</p></div></p>
<p>Here we have an image of scotch barrels, specifically my favorite scotch, Lagavulin. Xception correctly classifies this image as <em>&#8220;barrels&#8221;</em>.</p>
<p>This last example was classified using VGG16:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b58348168c79100636448" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title">VGGNet, ResNet, Inception, and Xception with Keras</span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Shell</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ python classify_image.py --image images/tv.png --model vgg16</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b58348168c79100636448-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b58348168c79100636448-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">python </span><span class="crayon-v">classify_image</span><span class="crayon-e">.py</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">image </span><span class="crayon-v">images</span><span class="crayon-o">/</span><span class="crayon-v">tv</span><span class="crayon-e">.png</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-e">model </span><span class="crayon-v">vgg16</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p><div id="attachment_5239" style="max-width: 610px" class="wp-caption aligncenter"><img class="size-full wp-image-5239" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_tv.jpg" alt="" width="600" height="328" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_tv.jpg 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/imagenet_vgg16_tv-300x164.jpg 300w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><strong>Figure 15:</strong> VGG16 pre-trained on ImageNet with Keras.</p></div></p>
<p>The image itself was captured a few months ago as I was finishing up <em>The Witcher III: The Wild Hunt</em> (easily in my top-3 favorite games of all time). The first prediction by VGG16 is <em>&#8220;home theatre&#8221;</em> &#8212; a reasonable prediction given that there is a <em>&#8220;television/monitor&#8221;</em> in the top-5 predictions as well.</p>
<p>As you can see from the examples in this blog post, networks pre-trained on the ImageNet dataset are capable of recognizing a variety of common day-to-day objects. I hope that you can use this code in your own projects!</p>
<h2>What now?</h2>
<p>Congratulations!</p>
<p>You can now recognize 1,000 separate object categories from the ImageNet dataset using pre-trained state-of-the-art Convolutional Neural Networks.</p>
<p><strong>&#8230;but what if you wanted to train your own <em>custom</em> deep learning networks <em>from scratch?</em></strong></p>
<p>How would you go about it?</p>
<p>Do you know where to start?</p>
<p><strong>Let me help:</strong></p>
<p>Whether this is the <strong>first time you&#8217;ve worked with machine learning and neural networks</strong> or <strong>you&#8217;re already a seasoned deep learning practitioner</strong>, my new book is engineered from the ground up to help you reach deep learning expert status.</p>
<p><a href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/" target="_blank"><img class="aligncenter wp-image-5247 size-full" src="https://www.pyimagesearch.com/wp-content/uploads/2017/03/dl4cv_in_post.png" width="600" height="344" srcset="https://www.pyimagesearch.com/wp-content/uploads/2017/03/dl4cv_in_post.png 600w, https://www.pyimagesearch.com/wp-content/uploads/2017/03/dl4cv_in_post-300x172.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></a></p>
<div style="margin-bottom: 15px;"><center><a style="color: #ffffff; text-decoration: none; font-family: Helvetica, Arial, sans-serif; font-weight: bold; font-size: 16px; line-height: 20px; padding: 10px; display: inline-block; max-width: 300px; border-radius: 5px; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 1px; box-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 3px inset, rgba(0, 0, 0, 0.498039) 0px 1px 3px; background: #DF4B4B;" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/" target="blank">Click Here to Learn More</a></center></div>
<h2>Summary</h2>
<p>In today&#8217;s blog post we reviewed the five Convolutional Neural Networks pre-trained on the ImageNet dataset inside the Keras library:</p>
<ol>
<li>VGG16</li>
<li>VGG19</li>
<li>ResNet50</li>
<li>Inception V3</li>
<li>Xception</li>
</ol>
<p>I then demonstrated how to use each of these architectures to classify your own input images using the Keras library and the Python programming language.</p>
<p><strong>If you are interested in learning more about deep learning and Convolutional Neural Networks (and how to train your own networks from scratch), be sure to take a look at my upcoming book, <a href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/" target="_blank"><em>Deep Learning for Computer Vision with Python</em></a>, available for pre-order now.</strong></p>
<h2 id="post_downloads">Downloads:</h2>
<div id="mc4wp-form-1" class="form mc4wp-form mc4wp-form-761"><form action="https://www.getdrip.com/forms/90548390/submissions" method="post" target="blank" data-drip-embedded-form="90548390"><img style="padding-right: 10px; width: 115px; border: none; float: left;" src="https://www.pyimagesearch.com/wp-content/uploads/2014/02/download-code-icon.png" alt="" />If you would like to download the code and images used in this post, please enter your email address in the form below. Not only will you get a .zip of the code, I’ll also send you a <strong>FREE 17-page Resource Guide on Computer Vision, OpenCV, and Deep Learning.</strong> Inside you'll find my hand-picked tutorials, books, courses, and libraries to help you master CV and DL! Sound good? If so, enter your email address and I’ll send you the code immediately!
<p style="margin-left: 130px; margin-top: 10px;"><label for="fields[email]">Email address:</label><input name="fields[email]" type="email" value="" placeholder="Your email address" /></p>
<p style="margin-left: 130px;"><input type="submit" value="Download the code!" /></p>
</form></div>
<h2></h2>
	</section><!-- /.entry -->
	<div class="fix"></div>
		<aside id="connect">
		<h3>Resource Guide (it’s totally free).</h3>

		<div >
			<p><img title="Get your FREE 17-page Computer Vision and Deep Learning Resource Guide PDF" src="https://www.pyimagesearch.com/wp-content/uploads/2018/07/computer_vision_deep_learning_resource_guide_cover.png" style="padding-right: 10px;width: 230px;float: left" />
<div style="padding-top: 35px">
Enter your email address below to get my <strong>free 17-page Computer Vision, OpenCV, and Deep Learning Resource Guide PDF</strong>. Inside you'll find my hand-picked tutorials, books, courses, and Python libraries to help you master computer vision and deep learning!</div></p>

			
						<form action="https://www.getdrip.com/forms/657075648/submissions" method="post" target="_blank" data-drip-embedded-form="657075648">
				<div>
					<input type="email" name="fields[email]" class="required email" value="" placeholder="Your email address" style="width: 50%;" />
				</div>
				<div>
					<input id="mc-embedded-subscribe" type="submit" name="submit" class="btn submit button" value="Download the Guide!" data-drip-attribute="sign-up-button" />
				</div>
			</form>
			
						<div class="social">
		   					</div>
			
		</div><!-- col-left -->

		
        <div class="fix"></div>
	</aside>
	<div class="post-utility"><p class="tags"><i class="icon-tag"></i> <a href="https://www.pyimagesearch.com/tag/inception/" rel="tag">inception</a>, <a href="https://www.pyimagesearch.com/tag/keras/" rel="tag">keras</a>, <a href="https://www.pyimagesearch.com/tag/micro-architecture/" rel="tag">micro-architecture</a>, <a href="https://www.pyimagesearch.com/tag/resnet/" rel="tag">resnet</a>, <a href="https://www.pyimagesearch.com/tag/vgg/" rel="tag">vgg</a>, <a href="https://www.pyimagesearch.com/tag/xception/" rel="tag">xception</a></p> </div>
</article><!-- /.post -->
	        <div class="post-entries">
	            <div class="nav-prev fl"><a href="https://www.pyimagesearch.com/2017/03/13/an-interview-with-davis-king-creator-of-the-dlib-toolkit/" rel="prev"><i class="icon-angle-left"></i> An interview with Davis King, creator of the dlib toolkit</a></div>
	            <div class="nav-next fr"><a href="https://www.pyimagesearch.com/2017/03/27/how-to-install-dlib/" rel="next">How to install dlib <i class="icon-angle-right"></i></a></div>
	            <div class="fix"></div>
	        </div>

		<div id="comments">		 	<h3 id="comments-title">78 Responses to <em>ImageNet: VGGNet, ResNet, Inception, and Xception with Keras</em></h3>
		 	<ol class="commentlist">
					                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-420811"></a>
	      	
	      	<div id="li-comment-420811" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/7e92da459129e053f9af8fc7e9404b28?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/7e92da459129e053f9af8fc7e9404b28?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Aramis</span>           
	                <span class="date">March 20, 2017 at 12:24 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420811" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420811">
				
				<p>Dear Adrian;</p>
<p>Thank you for you nice tutorial. I always learn many new points from your tutorials which organized and explained very-well. I have implemented this code and I could figure out how to use these models with keras. I thought now I can use transfer learning with these pre-trained models and train on my own data. </p>
<p>However, the main problem with my data is that they are medical images and gray-scale. I could follow the tutorial which proposed by FCohelt but I couldn&#8217;t figure out how to change the structure of the models to accept 1 channel data.</p>
<p>I would be glad if you could give some hint for transfer learning with pre-trained models for not RGB but gray-scale images.</p>
<p>Regards.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420811' onclick='return addComment.moveForm( "comment-420811", "420811", "respond", "5218" )' aria-label='Reply to Aramis'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-420887"></a>
	      	
	      	<div id="li-comment-420887" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 21, 2017 at 7:20 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420887" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420887">
				
				<p>These pre-trained networks assume you are using 3 channel images &#8212; you won&#8217;t be able to modify them to use 1 channel images unless you train them from scratch. Instead, the solution is to turn your 1 channel image into a 3 channel image:</p>
<p><code>image = np.dstack([1chan, 1chan, 1chan])</code></p>
<p>From there you can pass the image through the network since it&#8217;s a 3 channel image (but appears gray).</p>
<p>I&#8217;ll also be discussing transfer learning in great detail in my upcoming book, <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420887' onclick='return addComment.moveForm( "comment-420887", "420887", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
	                 
		<li class="comment even depth-2">
	    
	    	<a name="comment-446501"></a>
	      	
	      	<div id="li-comment-446501" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/bb563e2ff743b1a1fd7defab875e37d0?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/bb563e2ff743b1a1fd7defab875e37d0?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name"><a href='http://www.brlnce.com' rel='external nofollow' class='url'>JDk</a></span>           
	                <span class="date">January 15, 2018 at 2:26 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-446501" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-446501">
				
				<p>Great Job,</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-446501' onclick='return addComment.moveForm( "comment-446501", "446501", "respond", "5218" )' aria-label='Reply to JDk'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-420812"></a>
	      	
	      	<div id="li-comment-420812" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/d5192d47b99e9eb1b3556aa1351a3479?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/d5192d47b99e9eb1b3556aa1351a3479?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Parth</span>           
	                <span class="date">March 20, 2017 at 12:42 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420812" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420812">
				
				<p>Hey Adrian,<br />
Thanks for the blog.<br />
I was hoping to do Pedestrian/human detection using Convolutional Neural Networks. I have tried using HoG but it didn&#8217;t turn out to be super accurate. The problem I am facing with using CNN with ImageNet trained classifiers is that there is no class/label as &#8216;person&#8217; or &#8216;human&#8217; or anything of that sort. What do you suggest I do? Could I try training it with INRIA person dataset or something similar? If yes, how?<br />
Thanks!</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420812' onclick='return addComment.moveForm( "comment-420812", "420812", "respond", "5218" )' aria-label='Reply to Parth'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-420886"></a>
	      	
	      	<div id="li-comment-420886" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 21, 2017 at 7:18 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420886" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420886">
				
				<p>I would fine-tune one of the networks on a dataset that is representative of the people you want to detect in images. If that&#8217;s INRIA, use it for fine-tuning.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420886' onclick='return addComment.moveForm( "comment-420886", "420886", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-420815"></a>
	      	
	      	<div id="li-comment-420815" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/a1f0c3918f668665618c26ce3a9d2a9f?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a1f0c3918f668665618c26ce3a9d2a9f?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">nicho</span>           
	                <span class="date">March 20, 2017 at 12:59 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420815" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420815">
				
				<p>great</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420815' onclick='return addComment.moveForm( "comment-420815", "420815", "respond", "5218" )' aria-label='Reply to nicho'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-420829"></a>
	      	
	      	<div id="li-comment-420829" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/20e23bb029eb069f9987cfd2d82ae34c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/20e23bb029eb069f9987cfd2d82ae34c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ashti</span>           
	                <span class="date">March 20, 2017 at 5:11 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420829" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420829">
				
				<p>Hi,</p>
<p>Not related to this post.<br />
But i have a query wrt to keyframe extraction from videos.<br />
Using python and opencv i have to extract keyframes.<br />
I tried getting frames for each frame and then subtracting from each other and storing unique one which resulted in huge amoutn of frames.\<br />
I need to calculate pixel difference of frames and compare it with a threshold value. if PD &gt; threshold store it as keyframe. Can you please give me an example on how can i calculate threshold of images which would be fetch me good amount of keyframes. same would be applied for other videos too&#8230;</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420829' onclick='return addComment.moveForm( "comment-420829", "420829", "respond", "5218" )' aria-label='Reply to Ashti'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-420883"></a>
	      	
	      	<div id="li-comment-420883" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 21, 2017 at 7:13 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420883" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420883">
				
				<p>Hey Ashti &#8212; I would kindly ask that comments on a particular blog post be related to the subject matter of the post (otherwise it comes off as a bit rude/presumptive). If you want to learn more about comparing images, <a target="blank" href="https://www.pyimagesearch.com/2014/09/15/python-compare-two-images/">try this post</a>. Best of luck with the project.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420883' onclick='return addComment.moveForm( "comment-420883", "420883", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-420858"></a>
	      	
	      	<div id="li-comment-420858" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/af85b901bd45bf3a030862ac0808f69f?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/af85b901bd45bf3a030862ac0808f69f?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">MiaoDX</span>           
	                <span class="date">March 21, 2017 at 3:31 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420858" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420858">
				
				<p>Aha, not so easy for me to point out a typo since there are so many readers and you&#8217;re so careful.</p>
<p>However, in &#8220;VGG16 and VGG19&#8221; section, &#8220;Due to its depth and number of fully-connected nodes, VGG is over 533MB for VGG16 and 574MB for VGG16. This makes deploying VGG a tiresome task.&#8221;</p>
<p>The latter should be <code>VGG19</code>, I think. ^_^</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420858' onclick='return addComment.moveForm( "comment-420858", "420858", "respond", "5218" )' aria-label='Reply to MiaoDX'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-420878"></a>
	      	
	      	<div id="li-comment-420878" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 21, 2017 at 7:06 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420878" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420878">
				
				<p>You are correct, thank you for pointing out the typo! It is fixed now.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420878' onclick='return addComment.moveForm( "comment-420878", "420878", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-420959"></a>
	      	
	      	<div id="li-comment-420959" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/de07bb5d4f68b3eaf44a95eaf48958e1?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/de07bb5d4f68b3eaf44a95eaf48958e1?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ruben</span>           
	                <span class="date">March 22, 2017 at 4:32 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420959" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420959">
				
				<p>When I import from keras.applications import ResNet50, I have the next error:</p>
<p>&#8230;<br />
ImportError: cannot import name &#8216;GlobalAveragePooling2D&#8217;</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420959' onclick='return addComment.moveForm( "comment-420959", "420959", "respond", "5218" )' aria-label='Reply to Ruben'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-420978"></a>
	      	
	      	<div id="li-comment-420978" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 22, 2017 at 8:34 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420978" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420978">
				
				<p>Which version of Keras are you running? And which version of TensorFlow/Theano?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420978' onclick='return addComment.moveForm( "comment-420978", "420978", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment even depth-3">
	    
	    	<a name="comment-420991"></a>
	      	
	      	<div id="li-comment-420991" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/de07bb5d4f68b3eaf44a95eaf48958e1?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/de07bb5d4f68b3eaf44a95eaf48958e1?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ruben</span>           
	                <span class="date">March 22, 2017 at 8:59 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420991" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420991">
				
				<p>Thanks, all is ok with keras-2.0.2  theano -0.9.0</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420991' onclick='return addComment.moveForm( "comment-420991", "420991", "respond", "5218" )' aria-label='Reply to Ruben'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-4">
	    
	    	<a name="comment-420994"></a>
	      	
	      	<div id="li-comment-420994" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 22, 2017 at 9:08 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-420994" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-420994">
				
				<p>Congrats on resolving the issue!</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-420994' onclick='return addComment.moveForm( "comment-420994", "420994", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-421070"></a>
	      	
	      	<div id="li-comment-421070" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/23e27ee4cb27cc6b58fcba86b0feb00b?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/23e27ee4cb27cc6b58fcba86b0feb00b?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Abraham George</span>           
	                <span class="date">March 23, 2017 at 11:57 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421070" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421070">
				
				<p>I need to take live images and label it how do i do it?<br />
I cannot pre process the obtained frame ,what should i do?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421070' onclick='return addComment.moveForm( "comment-421070", "421070", "respond", "5218" )' aria-label='Reply to Abraham George'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-421186"></a>
	      	
	      	<div id="li-comment-421186" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 25, 2017 at 9:34 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421186" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421186">
				
				<p>For each frame in your video stream you would pass it through the network and obtain the output class labels.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421186' onclick='return addComment.moveForm( "comment-421186", "421186", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-421071"></a>
	      	
	      	<div id="li-comment-421071" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/23e27ee4cb27cc6b58fcba86b0feb00b?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/23e27ee4cb27cc6b58fcba86b0feb00b?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Abraham George</span>           
	                <span class="date">March 23, 2017 at 11:59 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421071" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421071">
				
				<p>what is the difference between parsing an image and reading it using imread?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421071' onclick='return addComment.moveForm( "comment-421071", "421071", "respond", "5218" )' aria-label='Reply to Abraham George'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-421185"></a>
	      	
	      	<div id="li-comment-421185" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 25, 2017 at 9:34 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421185" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421185">
				
				<p>I&#8217;m not sure what you mean Abraham, can you please elaborate on your comment?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421185' onclick='return addComment.moveForm( "comment-421185", "421185", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-421120"></a>
	      	
	      	<div id="li-comment-421120" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/57a3e0376b1cf5c58793de3b5e32785f?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/57a3e0376b1cf5c58793de3b5e32785f?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Sunggu kim</span>           
	                <span class="date">March 24, 2017 at 11:01 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421120" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421120">
				
				<p>Thank you for great tutorial.</p>
<p>i&#8217;m always wondering about can i append more class to pre-trained network with my data or should i re-train all things?</p>
<p>If possible we can save huge time and resources.</p>
<p>Will it be possible?</p>
<p>Thanks!</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421120' onclick='return addComment.moveForm( "comment-421120", "421120", "respond", "5218" )' aria-label='Reply to Sunggu kim'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-421172"></a>
	      	
	      	<div id="li-comment-421172" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 25, 2017 at 9:22 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421172" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421172">
				
				<p>The process of changing the output classes of a pre-trained network <em>without</em> having to re-train it from scratch is called <em>fine-tuning. I&#8217;ll be covering fine-tuning in detail inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</em></p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421172' onclick='return addComment.moveForm( "comment-421172", "421172", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment even depth-3">
	    
	    	<a name="comment-421214"></a>
	      	
	      	<div id="li-comment-421214" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/57a3e0376b1cf5c58793de3b5e32785f?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/57a3e0376b1cf5c58793de3b5e32785f?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Sunggu kim</span>           
	                <span class="date">March 26, 2017 at 4:31 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421214" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421214">
				
				<p>Oh you always have a great answer.</p>
<p>I already bought the course from kickstarter.</p>
<p>I hope it to be released as soon as possible.</p>
<p>Thank you.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421214' onclick='return addComment.moveForm( "comment-421214", "421214", "respond", "5218" )' aria-label='Reply to Sunggu kim'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-4">
	    
	    	<a name="comment-421404"></a>
	      	
	      	<div id="li-comment-421404" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 28, 2017 at 1:09 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421404" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421404">
				
				<p>Thank you Sunggu Kim! I am working on the book and will ensure it will be released as soon as possible.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421404' onclick='return addComment.moveForm( "comment-421404", "421404", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-421426"></a>
	      	
	      	<div id="li-comment-421426" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/b510c10daec2e7954c23d5a1163d8bf9?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b510c10daec2e7954c23d5a1163d8bf9?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">MJB</span>           
	                <span class="date">March 28, 2017 at 7:19 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421426" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421426">
				
				<p>Hi Adrian,</p>
<p>Great post as always. I was wondering, how one can test the top 1 and top 5 error of this pre-trained model across a standardized data set say Imagenet to compare these in a more scientific way. Any tips?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421426' onclick='return addComment.moveForm( "comment-421426", "421426", "respond", "5218" )' aria-label='Reply to MJB'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-421639"></a>
	      	
	      	<div id="li-comment-421639" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 31, 2017 at 2:07 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421639" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421639">
				
				<p>Can you elaborate more on what you mean by comparing the top-1 and top-5 accuracies? Normally for benchmark datasets like ImageNet your rank-1 and rank-5 accuracy on the test set <em>is</em> the standardized method to compare algorithms.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421639' onclick='return addComment.moveForm( "comment-421639", "421639", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-421603"></a>
	      	
	      	<div id="li-comment-421603" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/3e157572b6bd4ea379c5345b2dfdb9a8?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/3e157572b6bd4ea379c5345b2dfdb9a8?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">ap</span>           
	                <span class="date">March 31, 2017 at 8:23 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-421603" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-421603">
				
				<p>Thank, excellent !<br />
As more models emerge having a clean framework to review results with is very helpful, thank you and KERAS. Tested with Keras2/TF1.01 on Windows.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-421603' onclick='return addComment.moveForm( "comment-421603", "421603", "respond", "5218" )' aria-label='Reply to ap'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-422544"></a>
	      	
	      	<div id="li-comment-422544" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/469dbbb19166318907a4105b8e678316?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/469dbbb19166318907a4105b8e678316?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Aurora Guerra</span>           
	                <span class="date">April 11, 2017 at 12:33 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422544" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422544">
				
				<p>Hi Adrian.<br />
How could you train a neural network for the recognition of leaf species?<br />
I would have to create my own network or use an existing network<br />
Thanks for all post, these are great</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422544' onclick='return addComment.moveForm( "comment-422544", "422544", "respond", "5218" )' aria-label='Reply to Aurora Guerra'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-422620"></a>
	      	
	      	<div id="li-comment-422620" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 12, 2017 at 1:05 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422620" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422620">
				
				<p>Hey Aurora &#8212; I don&#8217;t have any blog posts <em>specifically</em> related to leaf species classification, but I&#8217;ll keep that in mind for a future blog post. Do you have a link to a leaf dataset you are currently working with?</p>
<p>In the meantime, be sure to take a look at <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a> where I&#8217;ll be discussing training your own deep learning neural networks in detail. A book like this would surely help with your project.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422620' onclick='return addComment.moveForm( "comment-422620", "422620", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-422677"></a>
	      	
	      	<div id="li-comment-422677" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/bea53e6b57760d867e5d384f4bcc0831?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/bea53e6b57760d867e5d384f4bcc0831?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">revan</span>           
	                <span class="date">April 12, 2017 at 10:08 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422677" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422677">
				
				<p>hello sir,<br />
I&#8217;m presently working on image processing project I want to know(step 1) how to differentiate human from animals.(step2)If captured image is human I want to confirm whether the human in the captured image has performed any crime by comparing currently captured image with an image that has been already stored in the database or cloud.<br />
so, it will b great if u provide code for step 1 n step2 asap&#8230;..</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422677' onclick='return addComment.moveForm( "comment-422677", "422677", "respond", "5218" )' aria-label='Reply to revan'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment even depth-2">
	    
	    	<a name="comment-422679"></a>
	      	
	      	<div id="li-comment-422679" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/bea53e6b57760d867e5d384f4bcc0831?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/bea53e6b57760d867e5d384f4bcc0831?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">revan</span>           
	                <span class="date">April 12, 2017 at 10:12 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422679" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422679">
				
				<p>by the way I&#8217;m using raspberry pi3, OpenCV, python language please help me and Guide me&#8230;</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422679' onclick='return addComment.moveForm( "comment-422679", "422679", "respond", "5218" )' aria-label='Reply to revan'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-422947"></a>
	      	
	      	<div id="li-comment-422947" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 16, 2017 at 9:07 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422947" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422947">
				
				<p>Differentiating between humans and animals can easily be accomplished via a bit of machine learning or deep learning. Exactly which method you should use is highly dependent on your input images/video streams.</p>
<p>As for crime detection, that sounds more like &#8220;activity recognition&#8221; which is not something I cover on PyImageSearch.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422947' onclick='return addComment.moveForm( "comment-422947", "422947", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-422887"></a>
	      	
	      	<div id="li-comment-422887" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/c4f002ed16feecf975735642ea5afc7f?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/c4f002ed16feecf975735642ea5afc7f?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ravi Kishan</span>           
	                <span class="date">April 15, 2017 at 4:58 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422887" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422887">
				
				<p>Hey Adrian,<br />
Your tutorial&#8217;s are really good. I had an issue which you could help me out with :). I want to store the value of the Tensor at the &#8220;Global Pool Layer&#8221; in Resnet50 but am unable to do so.<br />
Would be really nice if you could help me out</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422887' onclick='return addComment.moveForm( "comment-422887", "422887", "respond", "5218" )' aria-label='Reply to Ravi Kishan'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-422931"></a>
	      	
	      	<div id="li-comment-422931" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 16, 2017 at 8:52 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422931" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422931">
				
				<p>So if I understand correctly, you want to pass an image through the network and then take the raw values from the global pool layer prior to the softmax classifier being applied?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422931' onclick='return addComment.moveForm( "comment-422931", "422931", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-422906"></a>
	      	
	      	<div id="li-comment-422906" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/b7734380aee65be785a8cb617add5133?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b7734380aee65be785a8cb617add5133?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">kranthi</span>           
	                <span class="date">April 16, 2017 at 12:31 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422906" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422906">
				
				<p>using tensorflow for inception case got attribute error on concat_v2.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422906' onclick='return addComment.moveForm( "comment-422906", "422906", "respond", "5218" )' aria-label='Reply to kranthi'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment odd alt depth-2">
	    
	    	<a name="comment-422909"></a>
	      	
	      	<div id="li-comment-422909" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/b7734380aee65be785a8cb617add5133?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b7734380aee65be785a8cb617add5133?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">kranthi</span>           
	                <span class="date">April 16, 2017 at 1:19 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422909" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422909">
				
				<p>hello sir, </p>
<p>Using tensorflow 1.01 version keras &gt;2 version working for inception. </p>
<p>Tried with theano 0.90 and keras &gt;2 but not working when i tried with inception. you said only xception has to be run on tensorflow backend.</p>
<p>error was TypeError: int() argument must be a string, a bytes-like object or a number, not &#8216;list&#8217;.</p>
<p>everything else worked as given. </p>
<p>Thanks for great and up to date technology based tutorials.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422909' onclick='return addComment.moveForm( "comment-422909", "422909", "respond", "5218" )' aria-label='Reply to kranthi'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-3">
	    
	    	<a name="comment-422930"></a>
	      	
	      	<div id="li-comment-422930" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 16, 2017 at 8:51 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-422930" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-422930">
				
				<p>As I mentioned in the blog post, Xception <em>only</em> works for the TensorFlow backend. As for <em>Inception</em>, this should work without a problem on Theano. Can you try upgrading your Theano version as well?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-422930' onclick='return addComment.moveForm( "comment-422930", "422930", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-423405"></a>
	      	
	      	<div id="li-comment-423405" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/2376def6f82d20cd722756515a21c68c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/2376def6f82d20cd722756515a21c68c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Jeff</span>           
	                <span class="date">April 21, 2017 at 7:08 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-423405" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-423405">
				
				<p>Hi Adrian, this is AWESOME. Thank you very much. One question, is it posible to train my own model and merge it with an existing one? Thank you.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-423405' onclick='return addComment.moveForm( "comment-423405", "423405", "respond", "5218" )' aria-label='Reply to Jeff'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-423591"></a>
	      	
	      	<div id="li-comment-423591" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 24, 2017 at 9:52 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-423591" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-423591">
				
				<p>Hey Jeff &#8212; you can&#8217;t really &#8220;merge&#8221; the models together, but what you <em>can</em> do is:</p>
<p>1. Train your own model(s) and create an ensemble from your other models (and pre-trained ones) as well. This makes the assumption that all networks are trying to predict the same class labels.<br />
2. If you want to predict <em>different</em> class labels from the labels in ImageNet, you should try fine-tuning a pre-trained network.</p>
<p>I&#8217;m covering both techniques inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-423591' onclick='return addComment.moveForm( "comment-423591", "423591", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-423940"></a>
	      	
	      	<div id="li-comment-423940" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/a3b31b448ab5005c8a18694251004410?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a3b31b448ab5005c8a18694251004410?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">shiva</span>           
	                <span class="date">April 27, 2017 at 10:23 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-423940" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-423940">
				
				<p>Hi Adrian,</p>
<p>My name is Shiva, doing postdoctoral research in computer vision at ASU.<br />
I first found you because of an online search for deep learning tutorials.<br />
I am greatly interested in using deep learning models to perform medical image classification, segmentation and CBIR.<br />
My question is:<br />
I have data with training and validation splits for three classes. How do you modify the above codes to accept the training and validation splits and print the validation accuracy?<br />
The reason I am asking is because I could find tutorials on using pre-trained models to predict a single image but not in-depth analysis on using these very deep models for data classification with train and validation splits.<br />
My experience with deep learning is intermediate level.<br />
Thanks and looking forward.</p>
<p>Shiva</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-423940' onclick='return addComment.moveForm( "comment-423940", "423940", "respond", "5218" )' aria-label='Reply to shiva'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-423988"></a>
	      	
	      	<div id="li-comment-423988" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 28, 2017 at 9:26 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-423988" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-423988">
				
				<p>Hi Shiva &#8212; I think you might have some confusion regarding pre-trained neural networks. Once the networks are trained on a given number of classes (in this case, 1,000 ImageNet classes) you cannot use them to train on new classes (in your case, three classes) <em>unless</em> you apply feature extraction or fine-tuning.</p>
<p>Fine-tuning will be covered in detail inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>. Otherwise, I would suggest you work through the <a target="blank" href="https://www.pyimagesearch.com/pyimagesearch-gurus/">PyImageSearch Gurus course</a> so you get get some more experience working with machine learning and training models.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-423988' onclick='return addComment.moveForm( "comment-423988", "423988", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-427590"></a>
	      	
	      	<div id="li-comment-427590" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/5779a95737aa2d54dfa8bddbee185a44?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/5779a95737aa2d54dfa8bddbee185a44?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ramesh</span>           
	                <span class="date">June 18, 2017 at 1:51 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-427590" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-427590">
				
				<p>Hi Adrian,<br />
Wonderful tutorial. I want to limit the output to a particular set of labels only. That is to say, I don&#8217;t want all the ImageNet labels. Am I right in stating that in the previous few comments, you were referring to the solution of exact task I want to do when you said fine tuning of the pre-trained model is required?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-427590' onclick='return addComment.moveForm( "comment-427590", "427590", "respond", "5218" )' aria-label='Reply to Ramesh'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-427767"></a>
	      	
	      	<div id="li-comment-427767" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">June 20, 2017 at 11:09 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-427767" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-427767">
				
				<p>There are two ways to do this.</p>
<p>The first is a bit &#8220;hackish&#8221;. Simply use the pre-trained network as is, then ignore the indexes of the labels you are not interested in. Then, take the label with the largest probability (form the set of labels you care about) and use that as your final classification. Again, this is a hack and only recommended in very specific situations.</p>
<p>Otherwise, I would suggest fine-tuning.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-427767' onclick='return addComment.moveForm( "comment-427767", "427767", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-429618"></a>
	      	
	      	<div id="li-comment-429618" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/903c36c55f2a28cbb668176cd7d40522?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/903c36c55f2a28cbb668176cd7d40522?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Hesam Moshiri</span>           
	                <span class="date">July 12, 2017 at 5:00 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-429618" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-429618">
				
				<p>Hi</p>
<p>is it possible to fine-tune these existing models for a custom dataset?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-429618' onclick='return addComment.moveForm( "comment-429618", "429618", "respond", "5218" )' aria-label='Reply to Hesam Moshiri'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-429666"></a>
	      	
	      	<div id="li-comment-429666" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">July 12, 2017 at 2:42 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-429666" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-429666">
				
				<p>Yes, absolutely. I will be covering fine-tuning in detail inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-429666' onclick='return addComment.moveForm( "comment-429666", "429666", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-431874"></a>
	      	
	      	<div id="li-comment-431874" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/c1b89849566caeceb9ab02e8ae530578?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/c1b89849566caeceb9ab02e8ae530578?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Lucas</span>           
	                <span class="date">August 7, 2017 at 6:49 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-431874" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-431874">
				
				<p>Hi Adrian, I&#8217;m interested in implementing the Xception and Inception models to my own image classification problem. However, my dataset consists of small images of 25 by 25 pixels, which are black and white, so an input_shape of ( 1, 25, 25). Do you know if it&#8217;s possible, or the network fundamentally requires color?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-431874' onclick='return addComment.moveForm( "comment-431874", "431874", "respond", "5218" )' aria-label='Reply to Lucas'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-432060"></a>
	      	
	      	<div id="li-comment-432060" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">August 10, 2017 at 8:58 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-432060" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-432060">
				
				<p>I wouldn&#8217;t recommend trying to use Xception on your images if they are (1) grayscale and (2) substantially smaller than the images Xception was trained on. You can resize your images and then convert them to 3 channels by using:</p>
<p><code>image = np.dstack([image] * 3)</code></p>
<p>However, I wouldn&#8217;t expect very good accuracy.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-432060' onclick='return addComment.moveForm( "comment-432060", "432060", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-433867"></a>
	      	
	      	<div id="li-comment-433867" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/04e85320b49d91c839d5d1f4779c8890?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/04e85320b49d91c839d5d1f4779c8890?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">*_cyrus_rex_*</span>           
	                <span class="date">September 1, 2017 at 5:12 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-433867" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-433867">
				
				<p>Hi Adrian, great tutorial! I would be interested in classify just few of all the labels (seashore, lakeshore and alp). How could I go through this, maybe modifying the inception v3 model? Thanks in advance!</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-433867' onclick='return addComment.moveForm( "comment-433867", "433867", "respond", "5218" )' aria-label='Reply to *_cyrus_rex_*'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-434147"></a>
	      	
	      	<div id="li-comment-434147" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">September 5, 2017 at 9:39 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-434147" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-434147">
				
				<p>I would recommend using transfer learning, either via feature extraction or fine-tuning. I&#8217;m covering both inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-434147' onclick='return addComment.moveForm( "comment-434147", "434147", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-435032"></a>
	      	
	      	<div id="li-comment-435032" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/283d9056b27a2d451abcc2f57e1ef04a?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/283d9056b27a2d451abcc2f57e1ef04a?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Somnath Banerjee</span>           
	                <span class="date">September 17, 2017 at 5:54 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-435032" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-435032">
				
				<p>Dear Adrian,<br />
Very nice tutorials.  I used your sample code  to do some simple recognition.  Primarily using the Resnet50 model.  Below is a quick summary of my findings.  Any suggestions on how to take this to more accuracy?</p>
<p>python classify_image.py &#8211;image images/burger.jpg &#8211;model resnet   ==&gt;  Cheeseburger   (That was good)</p>
<p>python classify_image.py &#8211;image images/milk.jpg &#8211;model resnet  ==&gt; EggNog (Understandable)</p>
<p>python classify_image.py &#8211;image images/fruits.jpg &#8211;model resnet  ==&gt; BellPepper (Close)</p>
<p>python classify_image.py &#8211;image images/chicken_biriyani.jpg &#8211;model resnet  ==&gt; Plate (Needs help with Indian / Subcontinent food)<br />
python classify_image.py &#8211;image images/pasta.jpg &#8211;model resnet  ==&gt;  Corn  (Close)</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-435032' onclick='return addComment.moveForm( "comment-435032", "435032", "respond", "5218" )' aria-label='Reply to Somnath Banerjee'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-435111"></a>
	      	
	      	<div id="li-comment-435111" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">September 18, 2017 at 2:02 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-435111" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-435111">
				
				<p>It really depends on your input images but if you are intending to detect a small subset of images consider applying transfer learning, specifically fine-tuning or feature extraction. I cover both of these techniques in-depth inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-435111' onclick='return addComment.moveForm( "comment-435111", "435111", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-435854"></a>
	      	
	      	<div id="li-comment-435854" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/485c755fa1204f5f1a121aff94eeb5c7?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/485c755fa1204f5f1a121aff94eeb5c7?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name"><a href='http://na' rel='external nofollow' class='url'>Rafael</a></span>           
	                <span class="date">September 27, 2017 at 2:08 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-435854" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-435854">
				
				<p>hi Adrian,</p>
<p>always a nice article!</p>
<p>there is a typo in &#8220;To use VGG19, we simply need to change the &#8211;network  command line argument:&#8221; phrase the change command id &#8220;&#8211;model&#8221; not &#8220;&#8211;network&#8221;</p>
<p>I have a doubt of how to use transfer learning with different image inputs. Example: I have 2 different grayscale + depth image and I&#8217;d like to use existing trained model.<br />
Do you think it is possible?<br />
or do I have to train a new model?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-435854' onclick='return addComment.moveForm( "comment-435854", "435854", "respond", "5218" )' aria-label='Reply to Rafael'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-435921"></a>
	      	
	      	<div id="li-comment-435921" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">September 28, 2017 at 9:10 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-435921" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-435921">
				
				<p>Thank you for pointing out the type, Rafael.</p>
<p>As for your question, keep in mind that the ImageNet classifiers provided by Keras are pre-trained on RGB (3 channel) images in the ImageNet dataset. You can explicitly construct a 3 channel image from a single channel image via:</p>
<p><code>gray = np.dstack([gray] * 3)</code></p>
<p>And fine-tune from there; however, keep in mind that the filters learned by the neural network assume multi-channel. Your accuracy likely won&#8217;t be as good, but I would give it a shot just to obtain a baseline.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-435921' onclick='return addComment.moveForm( "comment-435921", "435921", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-436032"></a>
	      	
	      	<div id="li-comment-436032" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/f7a48c58b0e75bdf5d5e396298cf10cb?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/f7a48c58b0e75bdf5d5e396298cf10cb?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Kendall Edwards</span>           
	                <span class="date">September 29, 2017 at 2:49 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-436032" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-436032">
				
				<p>Adrian. Great tutorial. Is there any way to make this work in a Jupyter Notebook?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-436032' onclick='return addComment.moveForm( "comment-436032", "436032", "respond", "5218" )' aria-label='Reply to Kendall Edwards'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-436257"></a>
	      	
	      	<div id="li-comment-436257" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">October 2, 2017 at 10:03 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-436257" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-436257">
				
				<p>Provided you have Jupyter Notebooks and OpenCV installed on your system, yes. Make sure you replace the command line arguments with hard coded paths, though.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-436257' onclick='return addComment.moveForm( "comment-436257", "436257", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-437514"></a>
	      	
	      	<div id="li-comment-437514" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/72d8934ecf97d17c306506d04b106d31?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/72d8934ecf97d17c306506d04b106d31?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ballu</span>           
	                <span class="date">October 14, 2017 at 5:29 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-437514" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-437514">
				
				<p>Line 59 always exits with <code>killed</code> 🙁</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-437514' onclick='return addComment.moveForm( "comment-437514", "437514", "respond", "5218" )' aria-label='Reply to Ballu'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-437556"></a>
	      	
	      	<div id="li-comment-437556" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">October 14, 2017 at 10:31 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-437556" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-437556">
				
				<p>What system are you executing the script on? Normally the vague &#8220;killed&#8221; message happens due to an incorrect compile or the system running out of memory.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-437556' onclick='return addComment.moveForm( "comment-437556", "437556", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-439997"></a>
	      	
	      	<div id="li-comment-439997" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/41bef5cba1ee0c948e2342ecd63d7dfe?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/41bef5cba1ee0c948e2342ecd63d7dfe?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Abid</span>           
	                <span class="date">November 8, 2017 at 12:27 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-439997" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-439997">
				
				<p>Hi, Adrian Rosebrock, I need to know that how could I found and draw the bounding boxes around the detected objects</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-439997' onclick='return addComment.moveForm( "comment-439997", "439997", "respond", "5218" )' aria-label='Reply to Abid'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-2">
	    
	    	<a name="comment-440069"></a>
	      	
	      	<div id="li-comment-440069" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">November 9, 2017 at 6:22 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-440069" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-440069">
				
				<p>Please take a look at <a target="blank" href="https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/">this blog post</a> on object detection with deep learning.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-440069' onclick='return addComment.moveForm( "comment-440069", "440069", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment odd alt depth-3">
	    
	    	<a name="comment-440152"></a>
	      	
	      	<div id="li-comment-440152" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/41bef5cba1ee0c948e2342ecd63d7dfe?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/41bef5cba1ee0c948e2342ecd63d7dfe?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Abid</span>           
	                <span class="date">November 10, 2017 at 12:55 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-440152" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-440152">
				
				<p>Sir can&#8217;t we do it using keras</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-440152' onclick='return addComment.moveForm( "comment-440152", "440152", "respond", "5218" )' aria-label='Reply to Abid'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor even depth-4">
	    
	    	<a name="comment-440482"></a>
	      	
	      	<div id="li-comment-440482" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">November 13, 2017 at 2:17 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-440482" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-440482">
				
				<p>Yes, but not easily. I&#8217;m covering how to train your own custom object detectors inside my new book, <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-440482' onclick='return addComment.moveForm( "comment-440482", "440482", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-even depth-1">
	    
	    	<a name="comment-445576"></a>
	      	
	      	<div id="li-comment-445576" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/24f5cdd7a204daa4494db685eaa43117?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/24f5cdd7a204daa4494db685eaa43117?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name"><a href='http://-' rel='external nofollow' class='url'>samad</a></span>           
	                <span class="date">January 4, 2018 at 3:33 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-445576" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-445576">
				
				<p>Dear DR.Adrian, thank you, I&#8217;d like to design a system that capture abnormal activity from camera, please guide me.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-445576' onclick='return addComment.moveForm( "comment-445576", "445576", "respond", "5218" )' aria-label='Reply to samad'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-445710"></a>
	      	
	      	<div id="li-comment-445710" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/68d2e7fca43627c5cc9eba90a06b460b?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/68d2e7fca43627c5cc9eba90a06b460b?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">xingtao wei</span>           
	                <span class="date">January 5, 2018 at 10:54 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-445710" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-445710">
				
				<p>Nice tutorial.  I used keras with tensorflow backend to fine-tuning an inceptionV3 model, and I saw the model size tripled after fine-tuning.  That is, the original inceptionV3 model was about 98MB, and the size grew to 288MB after fine-tuning.  Any ideas on the reason?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-445710' onclick='return addComment.moveForm( "comment-445710", "445710", "respond", "5218" )' aria-label='Reply to xingtao wei'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-445715"></a>
	      	
	      	<div id="li-comment-445715" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">January 5, 2018 at 1:23 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-445715" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-445715">
				
				<p>I would suggest checking to see if the optimizer status was serialized to the model as well. You can delete it via:</p>
<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5b5834817087c618353964" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div><span class="crayon-language">Python</span></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
with h5py.File(model_file, 'a') as f:
        if 'optimizer_weights' in f.keys():
            del f['optimizer_weights']</textarea></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5b5834817087c618353964-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5b5834817087c618353964-2">2</div><div class="crayon-num" data-line="crayon-5b5834817087c618353964-3">3</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5b5834817087c618353964-1"><span class="crayon-st">with</span><span class="crayon-h"> </span><span class="crayon-v">h5py</span><span class="crayon-sy">.</span><span class="crayon-k ">File</span><span class="crayon-sy">(</span><span class="crayon-v">model_file</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">'a'</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">as</span><span class="crayon-h"> </span><span class="crayon-v">f</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5b5834817087c618353964-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-s">'optimizer_weights'</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">f</span><span class="crayon-sy">.</span><span class="crayon-e">keys</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5b5834817087c618353964-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">del</span><span class="crayon-h"> </span><span class="crayon-v">f</span><span class="crayon-sy">[</span><span class="crayon-s">'optimizer_weights'</span><span class="crayon-sy">]</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0011 seconds] -->
<p></p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-445715' onclick='return addComment.moveForm( "comment-445715", "445715", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-451317"></a>
	      	
	      	<div id="li-comment-451317" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/b463bc4f93f68ff5da48a0e287348d64?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b463bc4f93f68ff5da48a0e287348d64?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Niladri</span>           
	                <span class="date">February 26, 2018 at 3:28 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-451317" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-451317">
				
				<p>Hi Adrian,</p>
<p>I am using live video stream to detect the objects which are labelled, only issue is that..I want to print the detected objects regularly..in a stream and not the output of the detection after stopping the script. Could you please provide any help or snippet.</p>
<p>Thanks</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-451317' onclick='return addComment.moveForm( "comment-451317", "451317", "respond", "5218" )' aria-label='Reply to Niladri'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-451372"></a>
	      	
	      	<div id="li-comment-451372" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">February 26, 2018 at 1:45 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-451372" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-451372">
				
				<p>Hey Niladri &#8212; can you elaborate more on what you mean by &#8220;in a stream and not the output of detection after stopping the script&#8221;. I&#8217;m not sure what you mean.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-451372' onclick='return addComment.moveForm( "comment-451372", "451372", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-451725"></a>
	      	
	      	<div id="li-comment-451725" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/c72a13b686ce6dd4651e3f07bc8ad524?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/c72a13b686ce6dd4651e3f07bc8ad524?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Anusha Prakash</span>           
	                <span class="date">March 2, 2018 at 12:05 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-451725" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-451725">
				
				<p>What was the conclusion? Which of the models work best? And which layer features are best to pass to a classifier?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-451725' onclick='return addComment.moveForm( "comment-451725", "451725", "respond", "5218" )' aria-label='Reply to Anusha Prakash'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-451764"></a>
	      	
	      	<div id="li-comment-451764" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 2, 2018 at 10:27 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-451764" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-451764">
				
				<p>There is no &#8220;best model&#8221; as it is <em>highly</em> dependent on your image classification project. The same goes for the best feature extraction layer in a network. If you&#8217;re interested in learning more about these best practices and which models/layers to choose for a given project, I would suggest working through <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-451764' onclick='return addComment.moveForm( "comment-451764", "451764", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-453422"></a>
	      	
	      	<div id="li-comment-453422" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/ed9bc69d9edee48c62d8de607d5331ea?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/ed9bc69d9edee48c62d8de607d5331ea?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Zubair</span>           
	                <span class="date">March 18, 2018 at 1:34 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-453422" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-453422">
				
				<p>hi Adrian </p>
<p>I am Zubair Nawaz and i want to run this program on video not on images. how I can give videos path or anything else that will work not images.</p>
<p>thanks.</p>
<p>waiting for your quick reply.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-453422' onclick='return addComment.moveForm( "comment-453422", "453422", "respond", "5218" )' aria-label='Reply to Zubair'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-453579"></a>
	      	
	      	<div id="li-comment-453579" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 19, 2018 at 5:17 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-453579" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-453579">
				
				<p>You should use the &#8220;cv2.VideoCapture&#8221; function to access your video file. <a target="blank" href="https://www.pyimagesearch.com/2017/01/09/count-the-total-number-of-frames-in-a-video-with-opencv-and-python/">This blog post</a> will help you get started.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-453579' onclick='return addComment.moveForm( "comment-453579", "453579", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-453808"></a>
	      	
	      	<div id="li-comment-453808" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/cac4599f3a51f4126a1b0ad52b2ac3ec?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/cac4599f3a51f4126a1b0ad52b2ac3ec?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adesh</span>           
	                <span class="date">March 21, 2018 at 8:13 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-453808" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-453808">
				
				<p>Hey Adrian, how can i draw a rectangle around the detected objects ?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-453808' onclick='return addComment.moveForm( "comment-453808", "453808", "respond", "5218" )' aria-label='Reply to Adesh'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-453939"></a>
	      	
	      	<div id="li-comment-453939" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">March 22, 2018 at 9:59 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-453939" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-453939">
				
				<p>You need a network train for object detection not image classification. I would suggest starting with <a target="blank" href="https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/">this post</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-453939' onclick='return addComment.moveForm( "comment-453939", "453939", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-453983"></a>
	      	
	      	<div id="li-comment-453983" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/d6e53cd310d401852858089d556ce04a?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/d6e53cd310d401852858089d556ce04a?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Tom</span>           
	                <span class="date">March 22, 2018 at 7:15 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-453983" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-453983">
				
				<p>Which model will be good for painting cross verification, if the painting is original or not?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-453983' onclick='return addComment.moveForm( "comment-453983", "453983", "respond", "5218" )' aria-label='Reply to Tom'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
	                 
		<li class="comment odd alt thread-odd thread-alt depth-1">
	    
	    	<a name="comment-455846"></a>
	      	
	      	<div id="li-comment-455846" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/5035414f91909979d783ed748a69a253?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/5035414f91909979d783ed748a69a253?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Gagandeep Singh</span>           
	                <span class="date">April 10, 2018 at 3:04 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-455846" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-455846">
				
				<p>Hi Adrian,<br />
Is it possible to draw bounding box (basically object detection) while using inception or alexnet? Do we have to apply selective segmentation or something similar before feeding the image for evaluation or is there any other neural network that can identify ROI first (specially in tensorflow)?</p>
<p>Thanks!</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-455846' onclick='return addComment.moveForm( "comment-455846", "455846", "respond", "5218" )' aria-label='Reply to Gagandeep Singh'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment even depth-2">
	    
	    	<a name="comment-455847"></a>
	      	
	      	<div id="li-comment-455847" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/5035414f91909979d783ed748a69a253?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/5035414f91909979d783ed748a69a253?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Gagandeep Singh</span>           
	                <span class="date">April 10, 2018 at 3:07 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-455847" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-455847">
				
				<p>P.S. I dont want to use SSD or fast rcnn models!</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-455847' onclick='return addComment.moveForm( "comment-455847", "455847", "respond", "5218" )' aria-label='Reply to Gagandeep Singh'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-3">
	    
	    	<a name="comment-455931"></a>
	      	
	      	<div id="li-comment-455931" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">April 10, 2018 at 11:57 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-455931" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-455931">
				
				<p>No, unfortunately you cannot use a network trained for image classification directly for object detection. I&#8217;ll be covering this in more detail in a blog post publishing later this month/early next. There is a hack you can do, however. You can treat an image classifier as an object detector by:</p>
<p>1. Applying a <a target="blank" href="https://www.pyimagesearch.com/2015/03/23/sliding-windows-for-object-detection-with-python-and-opencv/">sliding window</a> + <a target="blank" href="https://www.pyimagesearch.com/2015/03/16/image-pyramids-with-python-and-opencv/">image pyramid</a><br />
2. Extracting the ROI at each step along the way<br />
3. Classifying the ROI with the network</p>
<p>I actually demonstrate exactly how to do this inside the Practitioner Bundle of <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-455931' onclick='return addComment.moveForm( "comment-455931", "455931", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-even depth-1">
	    
	    	<a name="comment-460185"></a>
	      	
	      	<div id="li-comment-460185" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/69d5d6b15a4849da01f0485abb169681?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/69d5d6b15a4849da01f0485abb169681?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">OLUCHI</span>           
	                <span class="date">May 6, 2018 at 7:50 pm</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-460185" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-460185">
				
				<p>Hello,I  am working on license plate detection using deep learning,am planing to use vggnet16 pre-trained model for the final verification  of the license plate bounding box.I have successfully extracted my license plate region and want  to use CNN to verify for the true license plate region from among the candidate region.I Dont really know how to go about it.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-460185' onclick='return addComment.moveForm( "comment-460185", "460185", "respond", "5218" )' aria-label='Reply to OLUCHI'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-460673"></a>
	      	
	      	<div id="li-comment-460673" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">May 9, 2018 at 10:12 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-460673" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-460673">
				
				<p>I would suggest two approaches using transfer learning:</p>
<p>1. Fine-tuning<br />
2. Feature extraction and training a model on top of the features</p>
<p>I cover both inside <a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">Deep Learning for Computer Vision with Python</a>.</p>
<p>I hope that helps point you in the right direction or at the very least gives you some more terms to go on.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-460673' onclick='return addComment.moveForm( "comment-460673", "460673", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	                 
		<li class="comment even thread-odd thread-alt depth-1">
	    
	    	<a name="comment-468369"></a>
	      	
	      	<div id="li-comment-468369" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/448675e8804a7b33e80cbc25ef6c4063?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/448675e8804a7b33e80cbc25ef6c4063?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Ashish Gupta</span>           
	                <span class="date">June 18, 2018 at 9:30 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-468369" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-468369">
				
				<p>Which is the most accurate architecture on Imagenet among alexnet, resnet, Inception, Vgg?</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-468369' onclick='return addComment.moveForm( "comment-468369", "468369", "respond", "5218" )' aria-label='Reply to Ashish Gupta'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	<ul class="children">
	                 
		<li class="comment byuser comment-author-adrian bypostauthor odd alt depth-2">
	    
	    	<a name="comment-468539"></a>
	      	
	      	<div id="li-comment-468539" class="comment-container">
	      	
					                <div class="avatar"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=80&#038;d=mm&#038;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /></div>
	                        
	
		      	<div class="comment-head">
		      	            
	                <span class="name">Adrian Rosebrock</span>           
	                <span class="date">June 19, 2018 at 8:43 am</span>
	                <span class="perma"><a href="https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#comment-468539" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>
		        		          	
				</div><!-- /.comment-head -->
		      
		   		<div class="comment-entry"  id="comment-468539">
				
				<p>On ImageNet specifically? ResNet is typically the most accurate.</p>
		            
										
	                <div class="reply">
	                    <a rel='nofollow' class='comment-reply-link' href='#comment-468539' onclick='return addComment.moveForm( "comment-468539", "468539", "respond", "5218" )' aria-label='Reply to Adrian Rosebrock'>Reply</a>	                </div><!-- /.reply -->                       
			
				</div><!-- /comment-entry -->
	
			</div><!-- /.comment-container -->
			
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ol>
		 	</div>	<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/#respond" style="display:none;">Click here to cancel reply.</a></small></h3>			<form action="https://www.pyimagesearch.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><label class="hide" for="comment">Comment</label> <textarea tabindex="4" id="comment" name="comment" cols="50" rows="10" maxlength="65525" aria-required="true" required="required"></textarea></p><p class="comment-form-author"><input id="author" name="author" type="text" class="txt" tabindex="1" value="" size="30" aria-required='true' /><label for="author">Name <span class="required">(required)</span></label> </p>
<p class="comment-form-email"><input id="email" name="email" type="text" class="txt" tabindex="2" value="" size="30" aria-required='true' /><label for="email">Email (will not be published) <span class="required">(required)</span></label> </p>
<p class="comment-form-url"><input id="url" name="url" type="text" class="txt" tabindex="3" value="" size="30" /><label for="url">Website</label></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Submit Comment" /> <input type='hidden' name='comment_post_ID' value='5218' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="0b17b2c6e6" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="96"/></p>			</form>
			</div><!-- #respond -->
	     
            </section><!-- /#main -->
                
            <aside id="sidebar">
<div id="woo_search-2" class="widget widget_woo_search"><div class="search_main">
    <form method="get" class="searchform" action="https://www.pyimagesearch.com/" >
        <input type="text" class="field s" name="s" value="Search..." onfocus="if (this.value == 'Search...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search...';}" />
                <button type="submit" class="icon-search submit" name="submit" value="Search"></button>
    </form>    
    <div class="fix"></div>
</div>
</div><div id="text-7" class="widget widget_text"><h3>Resource Guide (it&#8217;s totally free).</h3>			<div class="textwidget"><a href="#" class="manual-optin-trigger" data-optin-slug="mdoijtrmex7bpm0rp2hn"><img title="Get your FREE 17-page Computer Vision and Deep Learning Resource Guide PDF" src="https://www.pyimagesearch.com/wp-content/uploads/2018/07/computer_vision_deep_learning_resource_guide_cover.png" style="padding-right: 10px; width: 105px; float: left;"/></a>
<p>
Get your <strong>FREE 17 page Computer Vision, OpenCV, and Deep Learning Resource Guide PDF.</strong> Inside you'll find my hand-picked tutorials, books, courses, and libraries to help you master CV and DL.
</p>
<div style="clear: left;"></div>
<center><a href="#" class="manual-optin-trigger" data-optin-slug="mdoijtrmex7bpm0rp2hn" style="color: rgb(255, 255, 255); text-decoration: none; font-family: Helvetica, Arial, sans-serif; font-weight: bold; font-size: 16px; line-height: 20px; padding: 10px; display: inline-block; max-width: 300px; border-radius: 5px; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 1px; box-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 3px inset, rgba(0, 0, 0, 0.498039) 0px 1px 3px; background: #DF4B4B;">Download for Free!</a></center></div>
		</div><div id="text-9" class="widget widget_text"><h3>Deep Learning for Computer Vision with Python Book — OUT NOW!</h3>			<div class="textwidget"><a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/"><img title="Deep Learning with Computer Vision and Python Kickstarter" src="https://www.pyimagesearch.com/static/templates/deep-learning-for-computer-vision/images/dl_for_cv_cover.png" style="padding-bottom: 5px; width: 250px;" onClick="document.location='https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/'; return false;"/></a>
<p>You're interested in deep learning and computer vision, <em>but you don't know how to get started.</em> Let me help. <strong><a target="blank" href="https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/">My new book will teach you all you need to know about deep learning.</a></strong></p>
<p><input type="submit" value="Click here to master deep learning" style="background-color: #DF4B4B;" onClick="document.location='https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/'; return false;" /></p></div>
		</div><div id="text-5" class="widget widget_text"><h3>You can detect faces in images &#038; video.</h3>			<div class="textwidget"><a href="https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection" title="Practical Python and OpenCV"><img title="Learn how to detect faces in images and video" src="https://www.pyimagesearch.com/wp-content/uploads/2014/12/adrian_face_detection_sidebar.png" style="padding-bottom: 5px; width: 300px;" onClick="document.location='https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection'; return false;"/></a>
<p>
Are you interested in <strong>detecting faces in images & video?</strong> But <strong>tired of Googling for tutorials</strong> that <em>never work?</em> Then let me help! I guarantee that my new book will turn you into a <strong>face detection ninja</strong> by the end of this weekend.
<a href="https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection" title="Practical Python and OpenCV" onClick="document.location='https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection'; return false;">Click here to give it a shot yourself.</a>
</p>
<p><input type="submit" value="Click here to master face detection" style="background-color: #DF4B4B;" onClick="document.location='https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection'; return false;" /></p></div>
		</div><div id="text-8" class="widget widget_text"><h3>PyImageSearch Gurus: NOW ENROLLING!</h3>			<div class="textwidget"><div id="pyimg_gurus_carousel_container" style="width: 300px; height: 310px; cursor: pointer;" onClick="document.location='https://www.pyimagesearch.com/pyimagesearch-gurus/?src=sidebar'; return false;">
	<div id="pyimg_gurus_carousel" style="width: 300px; height: 300px; background: url('https://www.pyimagesearch.com/static/templates/pyimagesearch-gurus/images/gurus_carousel.jpg') no-repeat; background-position: 0px 0px;"></div>
</div>
<p style="margin-bottom: 8px;"><strong>The PyImageSearch Gurus course is <em>now enrolling!</em></strong> Inside the course you'll learn how to perform:</p>
<ul style="margin-bottom: 8px;">
	<li>Automatic License Plate Recognition (ANPR)</li>
	<li>Deep Learning</li>
	<li>Face Recognition</li>
	<li><em>and much more!</em></li>
</ul>
<p><strong>Click the button below to learn more about the course, take a tour, and get 10 (FREE) sample lessons</strong>.</p>
<p><input type="submit" value="Take a tour &amp; get 10 (free) lessons" style="background-color: #DF4B4B;" onClick="document.location='https://www.pyimagesearch.com/pyimagesearch-gurus/?src=sidebar'; return false;"/></p></div>
		</div><div id="woo_blogauthorinfo-2" class="widget widget_woo_blogauthorinfo"><h3>Hello! I&#8217;m Adrian Rosebrock.</h3><span class="left"><img alt='' src='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=90&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/02743529311d3b8babbaf6935670ec9c?s=180&#038;d=mm&#038;r=g 2x' class='avatar avatar-90 photo' height='90' width='90' /></span>
<p>I'm an entrepreneur and Ph.D who has launched two successful image search engines, <a target="blank" href="http://www.idmypill.com">ID My Pill</a> and <a target="blank" href="http://www.chicengine.com">Chic Engine</a>. I'm here to share my tips, tricks, and hacks I've learned along the way.</p>
<div class="fix"></div>
</div><div id="text-4" class="widget widget_text"><h3>Learn computer vision in a single weekend.</h3>			<div class="textwidget"><a href="https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend" title="Practical Python and OpenCV"><img title="Become an OpenCV guru" src="https://www.pyimagesearch.com/static/templates/practical-python-and-opencv/images/practical_python_and_opencv_2nd_cover.png" style="margin-left: 35px; padding-bottom: 15px; width: 215px;"/></a>
<p>Want to learn computer vision &amp; OpenCV? I can teach you in a <strong>single weekend</strong>. I know. It sounds crazy, but it’s no joke. My new book is your <strong>guaranteed, quick-start guide</strong> to becoming an OpenCV Ninja. So why not give it a try? <a href="https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend" title="Practical Python and OpenCV">Click here to become a computer vision ninja.</a></p>
<p><input type="submit" value="Click here to become an OpenCV ninja" style="background-color: #DF4B4B;" onClick="document.location='https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend'; return false;" /></p></div>
		</div><div id="text-3" class="widget widget_text"><h3>Subscribe via RSS</h3>			<div class="textwidget"><a target="blank" href="http://feeds.feedburner.com/Pyimagesearch"><img title="PyImageSearch RSS Feed" src="https://www.pyimagesearch.com/wp-content/uploads/2014/01/rss-icon.png"/ style="padding-right: 10px; float: left;"></a>
<p><strong>Never miss a post!</strong> Subscribe to the PyImageSearch RSS Feed and keep up to date with my image search engine tutorials, tips, and tricks</p></div>
		</div>
		<div id="woo_tabs-2" class="widget widget_woo_tabs"> 		<div id="tabs">

            <ul class="wooTabs">
                                <li class="popular"><a href="#tab-pop">Popular</a></li>                                                            </ul>

            <div class="clear"></div>

            <div class="boxes box inside">

	            
                                <ul id="tab-pop" class="list">
                    	<li>
				<a title="Install guide: Raspberry Pi 3 + Raspbian Jessie + OpenCV 3" href="https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/">Install guide: Raspberry Pi 3 + Raspbian Jessie + OpenCV 3</a>
		<span class="meta">April 18, 2016</span>
		<div class="fix"></div>
	</li>
		<li>
				<a title="Install OpenCV and Python on your Raspberry Pi 2 and B+" href="https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/">Install OpenCV and Python on your Raspberry Pi 2 and B+</a>
		<span class="meta">February 23, 2015</span>
		<div class="fix"></div>
	</li>
		<li>
				<a title="Raspbian Stretch: Install OpenCV 3 + Python on your Raspberry Pi" href="https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/">Raspbian Stretch: Install OpenCV 3 + Python on your Raspberry Pi</a>
		<span class="meta">September 4, 2017</span>
		<div class="fix"></div>
	</li>
		<li>
				<a title="Home surveillance and motion detection with the Raspberry Pi, Python, OpenCV, and Dropbox" href="https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/">Home surveillance and motion detection with the Raspberry Pi, Python, OpenCV, and Dropbox</a>
		<span class="meta">June 1, 2015</span>
		<div class="fix"></div>
	</li>
		<li>
				<a title="Ubuntu 16.04: How to install OpenCV" href="https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/">Ubuntu 16.04: How to install OpenCV</a>
		<span class="meta">October 24, 2016</span>
		<div class="fix"></div>
	</li>
		<li>
				<a title="How to install OpenCV 3 on Raspbian Jessie" href="https://www.pyimagesearch.com/2015/10/26/how-to-install-opencv-3-on-raspbian-jessie/">How to install OpenCV 3 on Raspbian Jessie</a>
		<span class="meta">October 26, 2015</span>
		<div class="fix"></div>
	</li>
		<li>
				<a title="Basic motion detection and tracking with Python and OpenCV" href="https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/">Basic motion detection and tracking with Python and OpenCV</a>
		<span class="meta">May 25, 2015</span>
		<div class="fix"></div>
	</li>
	                </ul>
                                                                
            </div><!-- /.boxes -->

        </div><!-- /wooTabs -->

        </div>         </aside><!-- /#sidebar -->

		</div><!-- /#main-sidebar-container -->         

		
    </div><!-- /#content -->
	
    <!--#footer-widgets-container-->
    <div id="footer-widgets-container">
	</div><!--/#footer_widgets_container_end-->
    <!--#footer_container_start-->
    <div id="footer-container">
	<footer id="footer" class="col-full">

		
		<div id="copyright" class="col-left">
			Find me on <a target="blank" href="https://twitter.com/pyimagesearch" style="font-weight: bold; color: #FFFFFF;">Twitter</a>, <a target="blank" href="https://www.facebook.com/pyimagesearch" style="font-weight: bold; color: #FFFFFF;">Facebook</a>, <a target="blank" href="https://plus.google.com/115909176846554117735/?rel=author" style="font-weight: bold; color: #FFFFFF;">Google+</a>, and <a target="blank" href="http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b" style="font-weight: bold; color: #FFFFFF;">LinkedIn</a>.<br/>
			<p>&copy; 2018 PyImageSearch. All Rights Reserved. </p>		</div>

		<div id="credit" class="col-right">
		</div>

	</footer>

	    </div><!--/#footer_container_end-->

	</div><!-- /#inner-wrapper -->

</div><!-- /#wrapper -->

<div class="fix"></div><!--/.fix-->

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-46641058-1', 'pyimagesearch.com');
  ga('send', 'pageview');

</script>

<! -- Clicky -->
<script src="//static.getclicky.com/js" type="text/javascript"></script>
<script type="text/javascript">try{ clicky.init(101083980); }catch(e){}</script>

<!-- Drip -->
<script type="text/javascript">
  var _dcq = _dcq || [];
  var _dcs = _dcs || {}; 
  _dcs.account = '4768429';
  
  (function() {
    var dc = document.createElement('script');
    dc.type = 'text/javascript'; dc.async = true; 
    dc.src = '//tag.getdrip.com/4768429.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(dc, s);
  })();
</script>

<!-- HitTail Code -->
<script type="text/javascript">
	(function(){ var ht = document.createElement('script');ht.async = true;
	  ht.type='text/javascript';ht.src = '//115962.hittail.com/mlt.js';
	  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ht, s);})();
</script>

<script type="text/javascript">
  (function() {
    window._pa = window._pa || {};
    // _pa.orderId = "myOrderId"; // OPTIONAL: attach unique conversion identifier to conversions
    // _pa.revenue = "19.99"; // OPTIONAL: attach dynamic purchase values to conversions
    // _pa.productId = "myProductId"; // OPTIONAL: Include product ID for use with dynamic ads
    var pa = document.createElement('script'); pa.type = 'text/javascript'; pa.async = true;
    pa.src = ('https:' == document.location.protocol ? 'https:' : 'http:') + "//tag.perfectaudience.com/serve/54220efd7ab7f03f7e000043.js";
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(pa, s);

// visited blog tracking
window._pq = window._pq || [];
_pq.push(['track', 'visited blog']);
  })();
</script>

<!-- facebook -->
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '1465896023527386');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=1465896023527386&ev=PageView&noscript=1"
/></noscript>
<!-- facebook -->

<! -- scroll to code -->
<script type="text/javascript">
jQuery(document).ready(function(){
	jQuery("#scroll_to_code").click(function(event){
		event.preventDefault();
		jQuery('html, body').animate({scrollTop: jQuery('#post_downloads').offset().top}, 1000);
	});
});
</script>

<!-- gurus sidebar carousel -->
<script type="text/javascript">
	jQuery(document).ready(function(){
		GURUS_CAROUSEL_IDX = 1;

		window.setInterval(function(){
			jQuery("#pyimg_gurus_carousel").fadeOut(function(){
				GURUS_CAROUSEL_TOP = GURUS_CAROUSEL_IDX * -300;
				jQuery("#pyimg_gurus_carousel").css("background-position", "0px " + GURUS_CAROUSEL_TOP + "px");
				GURUS_CAROUSEL_IDX += 1;

				if (GURUS_CAROUSEL_IDX == 4){
					GURUS_CAROUSEL_IDX = 0;
				}
			}).delay(250).fadeIn();
		}, 5000);
	});
</script>
<!-- Woo Tabs Widget -->
<script type="text/javascript">
jQuery(document).ready(function(){
	// UL = .wooTabs
	// Tab contents = .inside

	var tag_cloud_class = '#tagcloud';

	//Fix for tag clouds - unexpected height before .hide()
	var tag_cloud_height = jQuery( '#tagcloud').height();

	jQuery( '.inside ul li:last-child').css( 'border-bottom','0px' ); // remove last border-bottom from list in tab content
	jQuery( '.wooTabs').each(function(){
		jQuery(this).children( 'li').children( 'a:first').addClass( 'selected' ); // Add .selected class to first tab on load
	});
	jQuery( '.inside > *').hide();
	jQuery( '.inside > *:first-child').show();

	jQuery( '.wooTabs li a').click(function(evt){ // Init Click funtion on Tabs

		var clicked_tab_ref = jQuery(this).attr( 'href' ); // Strore Href value

		jQuery(this).parent().parent().children( 'li').children( 'a').removeClass( 'selected' ); //Remove selected from all tabs
		jQuery(this).addClass( 'selected' );
		jQuery(this).parent().parent().parent().children( '.inside').children( '*').hide();

		jQuery( '.inside ' + clicked_tab_ref).fadeIn(500);

		 evt.preventDefault();

	})
})
</script>
<!-- This site is converting visitors into subscribers and customers with OptinMonster - https://optinmonster.com :: Campaign Title: CVDL Resource Guide --><script type="text/javascript" src="https://a.optmnstr.com/app/js/api.min.js" data-campaign="mdoijtrmex7bpm0rp2hn" data-user="18464" data-env="production"></script><!-- / OptinMonster --><!-- This site is converting visitors into subscribers and customers with OptinMonster - https://optinmonster.com :: Campaign Title: Deep Learning Book Opt-in --><div id="om-holomlidgwitgymd-holder"></div><script>var holomlidgwitgymd,holomlidgwitgymd_poll=function(){var r=0;return function(n,l){clearInterval(r),r=setInterval(n,l)}}();!function(e,t,n){if(e.getElementById(n)){holomlidgwitgymd_poll(function(){if(window['om_loaded']){if(!holomlidgwitgymd){holomlidgwitgymd=new OptinMonsterApp();return holomlidgwitgymd.init({"u":"18464.467106","staging":0,"dev":0,"beta":0});}}},25);return;}var d=false,o=e.createElement(t);o.id=n,o.src="https://a.optmnstr.com/app/js/api.min.js",o.async=true,o.onload=o.onreadystatechange=function(){if(!d){if(!this.readyState||this.readyState==="loaded"||this.readyState==="complete"){try{d=om_loaded=true;holomlidgwitgymd=new OptinMonsterApp();holomlidgwitgymd.init({"u":"18464.467106","staging":0,"dev":0,"beta":0});o.onload=o.onreadystatechange=null;}catch(t){}}}};(document.getElementsByTagName("head")[0]||document.documentElement).appendChild(o)}(document,"script","omapi-script");</script><!-- / OptinMonster -->		<script type="text/javascript">var mdoijtrmex7bpm0rp2hn_shortcode = true;var holomlidgwitgymd_shortcode = true;</script>
		<script type="text/javascript" src="https://www.pyimagesearch.com/wp-content/cache/minify/69faf.js"></script>

<script type='text/javascript'>
/* <![CDATA[ */
var wpcf7 = {"apiSettings":{"root":"https:\/\/www.pyimagesearch.com\/wp-json\/contact-form-7\/v1","namespace":"contact-form-7\/v1"},"recaptcha":{"messages":{"empty":"Please verify that you are not a robot."}},"cached":"1"};
/* ]]> */
</script>

<script type="text/javascript" src="https://www.pyimagesearch.com/wp-content/cache/minify/b16c2.js"></script>

<script type='text/javascript'>
/* <![CDATA[ */
var fsb = {"ajax":"https:\/\/www.pyimagesearch.com\/wp-admin\/admin-ajax.php","nonce":"903fd12456"};
/* ]]> */
</script>

<script type="text/javascript" src="https://www.pyimagesearch.com/wp-content/cache/minify/8a711.js"></script>

		<script type="text/javascript">var omapi_localized = { ajax: 'https://www.pyimagesearch.com/wp-admin/admin-ajax.php?optin-monster-ajax-route=1', nonce: '3622a08804', slugs: {"mdoijtrmex7bpm0rp2hn":{"slug":"mdoijtrmex7bpm0rp2hn","mailpoet":false},"holomlidgwitgymd":{"slug":"holomlidgwitgymd","mailpoet":false}} };</script>
		</body>
</html>

<!--
Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

Object Caching 17300/4363 objects using disk
Page Caching using disk: enhanced 
Minified using disk
Database Caching 18/39 queries in 0.081 seconds using disk

Served from: www.pyimagesearch.com @ 2018-07-25 04:27:47 by W3 Total Cache
-->